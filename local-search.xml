<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring(一)</title>
    <link href="/2022/02/20/Spring%20(%E4%B8%80)/"/>
    <url>/2022/02/20/Spring%20(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h3 id="Spring-一"><a href="#Spring-一" class="headerlink" title="Spring (一)"></a>Spring (一)</h3><h4 id="Spring-如何解决循环依赖？"><a href="#Spring-如何解决循环依赖？" class="headerlink" title="Spring 如何解决循环依赖？"></a>Spring 如何解决循环依赖？</h4><p>三级缓存、提前暴露对象、AOP</p><p>总：解释什么是循环依赖，A依赖B，B依赖A</p><p>分：先说明bean的创建过程：实例化，初始化（填充属性）</p><p>​       1、先创建A对象，实例化A对象，此时A对象中的b属性为空，填充属性b</p><p>​        2、从容器中查找B对象，如果找到了直接赋值不存在循环依赖问题，找不到则直接创建B对象</p><p>​        3、实例化B对象，此时B对象中的a属性为空，填充属性a</p><p>​        4、从容器中查找A对象，找不到则直接创建</p><p>​        形成闭环的原因：</p><p>​        此时，仔细琢磨的话，会发现A对象是存在的，只不过A对象不是一个完整的状态，只完成了实例化但是未完成初始化，如果在程序调用过程中，拥有了某个对象的引用，能否在后期给他完成赋值操作，可以优先把非完整状态的对象优先赋值，等待后续操作来完成赋值，相当于提前暴露了某个不完整对象的引用，所以解决问题的核心在于实例化和初始化分开操作，这也是解决循环依赖问题的关键，</p><p>​    当所有的对象都完成实例化和初始化操作之后，还要把完整的对象放入容器中，此时在容器中存在对象的几个状态，完成实例化但未完成初始化，完整状态，因为都在容器中，所以要使用不同的map结构来进行存储，此时就有了一级缓存和二级缓存，如果一级缓存中有了，那么二级缓存中就不会存在同名的对象，因为他们的查找顺序是1、2、3这样的方式来查找的，一级缓存中存放的是完整对象，二级缓存中存放的是非完整对象</p><p>​    为什么有三级缓存？三级缓存的value类型是ObjectFactory，是一个函数式接口，存在的意义是保证整个容器的运行过程中同名的bean对象只能有一个。</p><p>​    如果一个对象需要被代理，或者说需要生成代理对象，那么要不要优先生成一个普通对象？要</p><p>​    普通对象和代理对象是不能同时出现在容器中，因此当一个对象需要被代理时，就要使用代理对象覆盖掉之前的普通对象，在实际调用中，是没有办法确定什么时候对象被使用，所以就要求某个对象被调用时，优先判断对象是否需要被代理，类似于一种回调机制的实现，因此传入lambda表达式时，可以通过lambda表达式来执行对象的覆盖过程，getEarlyBeanReference()</p><p>​    因此，所有的bean对象在创建时都要优先放进三级缓存中，在后续的使用过程中，如果需要被代理则返回代理对象，不需要则返回普通对象。</p><p><strong>缓存的放置时间和删除时间</strong></p><p>三级缓存：creatBeanInstance之后：addSingletonFactory</p><p>二级缓存：第一次从三级缓存确定对象是代理对象还是普通对象，同时删除三级缓存 getSingleton</p><p>一级缓存：生成完整对象后放入一级缓存，删除二三级缓存：addSingleton</p><h4 id="Bean-Factory与-FactoryBean有什么区别"><a href="#Bean-Factory与-FactoryBean有什么区别" class="headerlink" title="Bean Factory与 FactoryBean有什么区别"></a>Bean Factory与 FactoryBean有什么区别</h4><p>相同点：都是用来创建Bean对象的</p><p>不同点：使用BeanFactory创建对象的时候必须遵循严格的生命周期流程，太复杂了，如果想要简单的自定义某个对象的创建，同时创建完成的对象想交给spring来管理，那么就需要实现FactoryBean接口了</p><p>​    isSingleton：是否是单例对象<br>​    getObjectType：获取返回对象的类型<br>​    getObject：自定义创建对象的过程（new、反射、动态代理）</p><h4 id="Spring的设计模式"><a href="#Spring的设计模式" class="headerlink" title="Spring的设计模式"></a>Spring的设计模式</h4><p>单例模式：bean默认都是单例</p><p>原型模式：指定作用域为prototype</p><p>工厂模式：BeanFactory</p><p>模板模式：postProcessBeanFactory，onRefresh，initPropertyValue</p><p>策略模式：XmlBeanDefintionRedaer，PropertiesBeanDefinitionRedaer</p><p>观察者模式：listenr，event，multicast</p><p>适配器模式：Adapter</p><p>装饰者模式：BeanWrapper</p><p>责任链模式：使用aop时会生成一个拦截器</p><p>代理模式：动态代理</p><p>委托者模式：delegate</p><p>。。。。。。</p><h4 id="Spring的AOP底层实现"><a href="#Spring的AOP底层实现" class="headerlink" title="Spring的AOP底层实现"></a>Spring的AOP底层实现</h4><p>动态代理</p><p>aop是ioc的一个扩展功能，先有ioc，再有aop，只是在ioc的整个流程中新增的一个扩展点而已：BeanPostProcessor</p><p>总：aop概念，应用场景，动态代理</p><p>分：bean的创建过程中有一个步骤可以对bean进行扩展实现，aop本身就是一个扩展功能，所以在BeanPostProcessor的后置处理方法中来进行实现</p><p>​    1、代理对象的创建过程（advice，切面，切点）</p><p>​    2、通过jdk或者cglib的方式来生成代理对象</p><p>​    3、在执行方法调用时，会调用生成的字节码文件，直接会找到DynamicAdvisoredInterceptor类中的intercept方法，从此方法执行</p><p>​    4、根据之前定义好的通知来生成拦截器链</p><p>​    5、从拦截器中依次获取每一个通知开始进行执行，在执行过程中，为了方便找到下一个通知是哪个，会有一个CglibMethodInvocation的对象，找的时候是从-1的位置依次开始查找并且执行的。</p><h4 id="Spring的事务是如何回滚的"><a href="#Spring的事务是如何回滚的" class="headerlink" title="Spring的事务是如何回滚的"></a>Spring的事务是如何回滚的</h4><p>​    <strong>spring的事务管理是如何实现的？</strong></p><p>​    总：spring的事务是有aop来实现的，首先生成具体的代理对象，然后按照aop的整套流程来执行具体的操作逻辑，正常情况下要通过来完成核心功能，但是事务不是通过通知来实现的，而是通过TransactionInterceptor来实现的，然后调用invoke来实现具体逻辑。</p><p>​    分：1、先做准备工作，解析各个方法上事务相关的属性，根据具体的属性来判断是否开启新事务</p><p>​            2、当需要开启时，获取数据库连接，关闭自动提交功能，开启事务</p><p>​            3、执行具体的sql逻辑操作</p><p>​            4、在操作过程中，如果执行失败了，那么会通过completeTransactionAfterThrowing来完成事务的回滚操作，回滚的具体逻辑是通过doRollBack方法实现，实现的时候也是要现货区连接对象，通过连接对象来回滚</p><p>​            5、如果执行过程中，没有任何意外发生，那么通过commitTransactionAfterReturning来完成事务的提交操作，提交的具体逻辑是通过doCommit方法来实现的，实现的时候也是要获取连接，通过连接对象来提交</p><p>​            6、当事务执行完毕之后要清除相关的事务信息cleanTranscationInfo</p><h4 id="Spring事务的传播"><a href="#Spring事务的传播" class="headerlink" title="Spring事务的传播"></a>Spring事务的传播</h4><p>​    传播的特性有几种：7种</p><p>​    某一事务嵌套另一个事务的时候怎么办？</p><p>​    A方法调用B方法，AB方法都有事务，并且传播特性不同，那么A如果又一次，B怎么办，B有异常，A怎么办？</p><p>​    总：事务的传播特性指的是不同方法的嵌套调用过程中，事务应该如何进行处理，是用同一个事务还是不同的事务，当出现异常的时候会回滚还是提交，两个方法之间的相关影响，在日常生活中，是用比较多的是required、requires_new、nested</p><p>​    分：1、先说事务的不同分类，可分为三类：支持当前事务，不支持当前事务，嵌套事务</p><p>​            2、如果外层方法是required，内层方法是：required、requires_new、nested</p><p>​            3、如果外层方法是requires_new，内层方法是：required、requires_new、nested</p><p>​            4、如果外层方法是nested，内层方法是：required、requires_new、nested</p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 34道练习题</title>
    <link href="/2022/01/11/MySQL%2034%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <url>/2022/01/11/MySQL%2034%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="MySQL-34道练习题"><a href="#MySQL-34道练习题" class="headerlink" title="MySQL 34道练习题"></a>MySQL 34道练习题</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>***dept(部门表)***：<img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101113218998.png" alt="image-20211101113218998" style="zoom:70%;"></p><p><em><strong>emp(员工表)</strong></em>:<img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101113353510.png" alt="image-20211101113353510" style="zoom:67%;"></p><p>***salgrade(薪资表)***：<img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101113448270.png" alt="image-20211101113448270" style="zoom:67%;"></p><h4 id="1、取得每个部门最高薪水的人员名称"><a href="#1、取得每个部门最高薪水的人员名称" class="headerlink" title="1、取得每个部门最高薪水的人员名称"></a>1、取得每个部门最高薪水的人员名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.ename,t.<span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> deptno,<span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">AS</span> maxsal <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno) t<br><span class="hljs-keyword">JOIN</span> EMP e<br><span class="hljs-keyword">ON</span> t.deptno<span class="hljs-operator">=</span>e.deptno <span class="hljs-keyword">AND</span> t.maxsal<span class="hljs-operator">=</span>e.sal;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101141919095.png" alt="image-20211101141919095"></p><h4 id="2、哪些人在平均薪水之上"><a href="#2、哪些人在平均薪水之上" class="headerlink" title="2、哪些人在平均薪水之上"></a>2、哪些人在平均薪水之上</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span>,e.ename,e.sal<br><span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> deptno,<span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avgsal <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno) t<br><span class="hljs-keyword">JOIN</span> EMP e<br><span class="hljs-keyword">ON</span> t.deptno<span class="hljs-operator">=</span>e.deptno <span class="hljs-keyword">AND</span> e.sal<span class="hljs-operator">&gt;</span>t.avgsal;<br><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101142651421.png" alt="image-20211101142651421"></p><h4 id="3、取得部门中所有人平均的薪水等级"><a href="#3、取得部门中所有人平均的薪水等级" class="headerlink" title="3、取得部门中所有人平均的薪水等级"></a>3、取得部门中所有人平均的薪水等级</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.deptno,<span class="hljs-built_in">AVG</span>(s.grade)<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> SALGRADE s<br><span class="hljs-keyword">ON</span> e.sal <span class="hljs-keyword">BETWEEN</span> s.losal <span class="hljs-keyword">AND</span> s.hisal<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> e.deptno;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101143559406.png" alt="image-20211101143559406"></p><h4 id="4、不用组函数（max），取得最高薪水"><a href="#4、不用组函数（max），取得最高薪水" class="headerlink" title="4、不用组函数（max），取得最高薪水"></a>4、不用组函数（max），取得最高薪水</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> limit <span class="hljs-number">1</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>降序，取第一个<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> sal <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> sal <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> a.sal<br><span class="hljs-keyword">FROM</span> EMP a <br><span class="hljs-keyword">JOIN</span> EMP b<br><span class="hljs-keyword">ON</span> a.sal<span class="hljs-operator">&lt;</span>b.sal);<br></code></pre></td></tr></table></figure><blockquote><p>表的自连接。找出a表里面小于b表的工资，distinct代表去重。</p></blockquote><h4 id="5、取得平均薪水最高的部门的部门编号（两种）"><a href="#5、取得平均薪水最高的部门的部门编号（两种）" class="headerlink" title="5、取得平均薪水最高的部门的部门编号（两种）"></a>5、取得平均薪水最高的部门的部门编号（两种）</h4><blockquote><p>降序，取第一个</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> deptno,<span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avgsal<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> avgsal <span class="hljs-keyword">DESC</span> <br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>组函数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(t.avgsal)<br><span class="hljs-keyword">FROM</span> <br>(<span class="hljs-keyword">SELECT</span> deptno,<span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avgsal<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno ) t;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101145647457.png" alt="image-20211101145647457"></p><h4 id="6、取得平均薪水最高的部门的部门名称"><a href="#6、取得平均薪水最高的部门的部门名称" class="headerlink" title="6、取得平均薪水最高的部门的部门名称"></a>6、取得平均薪水最高的部门的部门名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>d.dname,<span class="hljs-built_in">AVG</span>(e.sal) <span class="hljs-keyword">AS</span> avgsal<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> d.dname<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> avgsal <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h4 id="7、求平均薪水的等级最低的部门的部门名称"><a href="#7、求平均薪水的等级最低的部门的部门名称" class="headerlink" title="7、求平均薪水的等级最低的部门的部门名称"></a>7、求平均薪水的等级最低的部门的部门名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span>,s.grade<br><span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> d.dname,<span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avgsal <span class="hljs-keyword">FROM</span> EMP e <span class="hljs-keyword">JOIN</span> DEPT d <span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> d.dname) t<br><span class="hljs-keyword">JOIN</span> SALGRADE s<br><span class="hljs-keyword">ON</span> t.avgsal <span class="hljs-keyword">BETWEEN</span> s.losal <span class="hljs-keyword">AND</span> s.hisal<br><span class="hljs-keyword">WHERE</span> <br>s.grade<span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> grade <span class="hljs-keyword">FROM</span> SALGRADE <span class="hljs-keyword">WHERE</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">AS</span> avgsal<br><span class="hljs-keyword">FROM</span> EMP <br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> avgsal <span class="hljs-keyword">ASC</span><br>LIMIT <span class="hljs-number">1</span>)<span class="hljs-keyword">BETWEEN</span> losal <span class="hljs-keyword">AND</span> hisal);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101153713381.png" alt="image-20211101153713381"></p><h4 id="8、取得比普通员工的最高薪水还高的领导人"><a href="#8、取得比普通员工的最高薪水还高的领导人" class="headerlink" title="8、取得比普通员工的最高薪水还高的领导人"></a>8、取得比普通员工的最高薪水还高的领导人</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ename,sal <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> sal<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> empno <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span><br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> mgr <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> mgr <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>))<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211101154502564.png" alt="image-20211101154502564"></p><h4 id="9、取得薪水最高的前五员工"><a href="#9、取得薪水最高的前五员工" class="headerlink" title="9、取得薪水最高的前五员工"></a>9、取得薪水最高的前五员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="10、取得薪水最高的第6到第10名员工"><a href="#10、取得薪水最高的第6到第10名员工" class="headerlink" title="10、取得薪水最高的第6到第10名员工"></a>10、取得薪水最高的第6到第10名员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> ename,sal <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sal <span class="hljs-keyword">desc</span> limit <span class="hljs-number">5</span>,<span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="11、取得最后入职的五个员工"><a href="#11、取得最后入职的五个员工" class="headerlink" title="11、取得最后入职的五个员工"></a>11、取得最后入职的五个员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ename,hiredate <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hiredate <span class="hljs-keyword">DESC</span> LIMIT <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><h4 id="12、取得每个薪水等级有多少个员工"><a href="#12、取得每个薪水等级有多少个员工" class="headerlink" title="12、取得每个薪水等级有多少个员工"></a>12、取得每个薪水等级有多少个员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.grade,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> EMP e <br><span class="hljs-keyword">JOIN</span> SALGRADE s <br><span class="hljs-keyword">ON</span> e.sal <span class="hljs-keyword">BETWEEN</span> s.losal <span class="hljs-keyword">AND</span> s.hisal<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.grade;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211103104418850.png" alt="image-20211103104418850"></p><h4 id="14、列出所有员工及领导的姓名"><a href="#14、列出所有员工及领导的姓名" class="headerlink" title="14、列出所有员工及领导的姓名"></a>14、列出所有员工及领导的姓名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ename <span class="hljs-string">&#x27;员工&#x27;</span>,b.ename <span class="hljs-string">&#x27;领导&#x27;</span><br><span class="hljs-keyword">FROM</span> EMP a<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> EMP b<br><span class="hljs-keyword">ON</span> a.mgr<span class="hljs-operator">=</span>b.empno;<br></code></pre></td></tr></table></figure><h4 id="15、列出受雇日期早于其直接上级的所有员工编号，姓名，部门名称"><a href="#15、列出受雇日期早于其直接上级的所有员工编号，姓名，部门名称" class="headerlink" title="15、列出受雇日期早于其直接上级的所有员工编号，姓名，部门名称"></a>15、列出受雇日期早于其直接上级的所有员工编号，姓名，部门名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ename ‘员工’,a.hiredate,b.ename ‘领导’,b.hiredate,d.dname,d.deptno<br><span class="hljs-keyword">FROM</span> EMP a <span class="hljs-keyword">JOIN</span> EMP b<br><span class="hljs-keyword">ON</span> a.mgr<span class="hljs-operator">=</span>b.empno<br><span class="hljs-keyword">JOIN</span> DEPT d <br><span class="hljs-keyword">ON</span> a.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">WHERE</span> a.hiredate<span class="hljs-operator">&lt;</span>b.hiredate <br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211103110624247.png" alt="image-20211103110624247"></p><h4 id="16、-列出部门名称和这些部门的员工信息，同时列出哪些没有员工的部门"><a href="#16、-列出部门名称和这些部门的员工信息，同时列出哪些没有员工的部门" class="headerlink" title="16、 列出部门名称和这些部门的员工信息，同时列出哪些没有员工的部门"></a>16、 列出部门名称和这些部门的员工信息，同时列出哪些没有员工的部门</h4><blockquote><p>left join就是把左边的那个表当主表，right join就是把右边的表当主表</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.<span class="hljs-operator">*</span>,d.dname <br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno;<br></code></pre></td></tr></table></figure><h4 id="17、列出至少有五个员工的所有部门"><a href="#17、列出至少有五个员工的所有部门" class="headerlink" title="17、列出至少有五个员工的所有部门"></a>17、列出至少有五个员工的所有部门</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.deptno,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-string">&#x27;人数&#x27;</span><br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> e.deptno<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211103112102120.png" alt="image-20211103112102120"></p><h4 id="18、列出薪水比史密斯多的所有员工"><a href="#18、列出薪水比史密斯多的所有员工" class="headerlink" title="18、列出薪水比史密斯多的所有员工"></a>18、列出薪水比史密斯多的所有员工</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">WHERE</span> sal<span class="hljs-operator">&gt;</span><br>(<span class="hljs-keyword">SELECT</span> sal<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SMITH&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="19、列出所有‘’CLERK‘’的姓名及其部门名称，部门的人数"><a href="#19、列出所有‘’CLERK‘’的姓名及其部门名称，部门的人数" class="headerlink" title="19、列出所有‘’CLERK‘’的姓名及其部门名称，部门的人数"></a>19、列出所有‘’CLERK‘’的姓名及其部门名称，部门的人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t1.<span class="hljs-operator">*</span>,t2.deptcount<br><span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> e.ename,e.job,d.dname,d.deptno<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">WHERE</span> e.job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;clerk&#x27;</span>)t1<br><span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> deptno,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> deptcount <br>     <span class="hljs-keyword">FROM</span> EMP <br>      <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno) t2<br><span class="hljs-keyword">ON</span> t1.deptno<span class="hljs-operator">=</span>t2.deptno;<br></code></pre></td></tr></table></figure><h4 id="20、列出最低薪水大于1500的各种工作及从事此工作的全部雇员"><a href="#20、列出最低薪水大于1500的各种工作及从事此工作的全部雇员" class="headerlink" title="20、列出最低薪水大于1500的各种工作及从事此工作的全部雇员"></a>20、列出最低薪水大于1500的各种工作及从事此工作的全部雇员</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.ename,t.job<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span>(<span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">MIN</span>(sal)<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MIN</span>(sal)<span class="hljs-operator">&gt;</span><span class="hljs-number">1500</span>) t<br><span class="hljs-keyword">ON</span> e.job<span class="hljs-operator">=</span>t.job<br></code></pre></td></tr></table></figure><h4 id="21、列出部门在“销售部”工作的员工的姓名，假定不知道销售部的部门编号"><a href="#21、列出部门在“销售部”工作的员工的姓名，假定不知道销售部的部门编号" class="headerlink" title="21、列出部门在“销售部”工作的员工的姓名，假定不知道销售部的部门编号"></a>21、列出部门在“销售部”工作的员工的姓名，假定不知道销售部的部门编号</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.ename<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> <br>(<span class="hljs-keyword">SELECT</span> deptno <span class="hljs-keyword">FROM</span> DEPT <span class="hljs-keyword">WHERE</span> dname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALES&#x27;</span>) t<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>t.deptno<br></code></pre></td></tr></table></figure><h4 id="22、列出薪水高于公司平均水平的所有员工，所在部门，上级领导，雇员的工资等级"><a href="#22、列出薪水高于公司平均水平的所有员工，所在部门，上级领导，雇员的工资等级" class="headerlink" title="22、列出薪水高于公司平均水平的所有员工，所在部门，上级领导，雇员的工资等级"></a>22、列出薪水高于公司平均水平的所有员工，所在部门，上级领导，雇员的工资等级</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>e.ename <span class="hljs-string">&#x27;员工&#x27;</span>,d.dname,l.ename <span class="hljs-string">&#x27;领导&#x27;</span>,s.grade<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> EMP l<br><span class="hljs-keyword">ON</span> e.mgr<span class="hljs-operator">=</span>l.empno<br><span class="hljs-keyword">JOIN</span> SALGRADE s<br><span class="hljs-keyword">ON</span> e.sal <span class="hljs-keyword">BETWEEN</span> s.losal <span class="hljs-keyword">AND</span> s.hisal<br><span class="hljs-keyword">WHERE</span> e.sal<span class="hljs-operator">&gt;</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sal) <span class="hljs-keyword">FROM</span> EMP);<br></code></pre></td></tr></table></figure><h4 id="23、列出与‘scott’从事相同工作的所有员工及部门名称"><a href="#23、列出与‘scott’从事相同工作的所有员工及部门名称" class="headerlink" title="23、列出与‘scott’从事相同工作的所有员工及部门名称"></a>23、列出与‘scott’从事相同工作的所有员工及部门名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.ename,e.job,d.dname<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">WHERE</span><br>job<span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> job <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SCOTT&#x27;</span>)<br><span class="hljs-keyword">AND</span><br>e.ename <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;scott&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="24、列出薪水等于部门30中员工的薪水的其他员工的姓名和薪水"><a href="#24、列出薪水等于部门30中员工的薪水的其他员工的姓名和薪水" class="headerlink" title="24、列出薪水等于部门30中员工的薪水的其他员工的姓名和薪水"></a>24、列出薪水等于部门30中员工的薪水的其他员工的姓名和薪水</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>ename,sal<br><span class="hljs-keyword">FROM</span><br>EMP<br><span class="hljs-keyword">WHERE</span><br>sal <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> sal <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span>) <br><span class="hljs-keyword">AND</span> deptno <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><h4 id="25、列出薪水高于部门30工作的所有员工的薪水的员工姓名额薪水，部门名称"><a href="#25、列出薪水高于部门30工作的所有员工的薪水的员工姓名额薪水，部门名称" class="headerlink" title="25、列出薪水高于部门30工作的所有员工的薪水的员工姓名额薪水，部门名称"></a>25、列出薪水高于部门30工作的所有员工的薪水的员工姓名额薪水，部门名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>e.ename,e.sal,d.dname<br><span class="hljs-keyword">FROM</span><br>EMP e<br><span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno <br><span class="hljs-keyword">WHERE</span><br>e.sal <span class="hljs-operator">&gt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(sal) <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><h4 id="26、列出在每个部门工作的员工数量，平均工资和平均服务期限"><a href="#26、列出在每个部门工作的员工数量，平均工资和平均服务期限" class="headerlink" title="26、列出在每个部门工作的员工数量，平均工资和平均服务期限"></a>26、列出在每个部门工作的员工数量，平均工资和平均服务期限</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.<span class="hljs-operator">*</span>,<span class="hljs-built_in">COUNT</span>(e.ename),<span class="hljs-built_in">AVG</span>(e.sal)<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> d.deptno,d.dname,d.loc;<br></code></pre></td></tr></table></figure><p>未完待续</p><h4 id="27、列出所有员工的姓名、部门名称和工资"><a href="#27、列出所有员工的姓名、部门名称和工资" class="headerlink" title="27、列出所有员工的姓名、部门名称和工资"></a>27、列出所有员工的姓名、部门名称和工资</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>e.ename,d.dname,e.sal<br><span class="hljs-keyword">FROM</span><br>EMP e<br><span class="hljs-keyword">JOIN</span><br>DEPT d<br><span class="hljs-keyword">ON</span><br>e.deptno<span class="hljs-operator">=</span>d.deptno;<br></code></pre></td></tr></table></figure><h4 id="28、列出所有部门的详细信息和人数"><a href="#28、列出所有部门的详细信息和人数" class="headerlink" title="28、列出所有部门的详细信息和人数"></a>28、列出所有部门的详细信息和人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.<span class="hljs-operator">*</span>,<span class="hljs-built_in">COUNT</span>(e.ename),<span class="hljs-built_in">AVG</span>(e.sal)<br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> DEPT d<br><span class="hljs-keyword">ON</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> d.deptno,d.dname,d.loc;<br></code></pre></td></tr></table></figure><h4 id="29、列出各种工作的最低工资以及从事此工作的雇员姓名"><a href="#29、列出各种工作的最低工资以及从事此工作的雇员姓名" class="headerlink" title="29、列出各种工作的最低工资以及从事此工作的雇员姓名"></a>29、列出各种工作的最低工资以及从事此工作的雇员姓名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> e.ename,t.<span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> EMP e<br><span class="hljs-keyword">JOIN</span><br>(<span class="hljs-keyword">SELECT</span> job, <span class="hljs-built_in">MIN</span>(sal) <span class="hljs-keyword">AS</span> minsal<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job) t<br><span class="hljs-keyword">ON</span> e.job<span class="hljs-operator">=</span>t.job <span class="hljs-keyword">AND</span> e.sal<span class="hljs-operator">=</span>t.minsal<br></code></pre></td></tr></table></figure><h4 id="30、列出所有员工的年工资，按年薪从低到高排序"><a href="#30、列出所有员工的年工资，按年薪从低到高排序" class="headerlink" title="30、列出所有员工的年工资，按年薪从低到高排序"></a>30、列出所有员工的年工资，按年薪从低到高排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ename,sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> <span class="hljs-keyword">AS</span> yearsal<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> yearsal <span class="hljs-keyword">ASC</span><br></code></pre></td></tr></table></figure><blockquote><p>(sal+ifnull(comm,0))*12 as yearsal</p></blockquote><h4 id="31、列出各个部门的manager的最低薪水"><a href="#31、列出各个部门的manager的最低薪水" class="headerlink" title="31、列出各个部门的manager的最低薪水"></a>31、列出各个部门的manager的最低薪水</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> deptno, <span class="hljs-built_in">MIN</span>(sal)<br><span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">WHERE</span> job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;manager&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno;<br></code></pre></td></tr></table></figure><h4 id="32、求出员工领导的薪水超过3000的员工名称与领导"><a href="#32、求出员工领导的薪水超过3000的员工名称与领导" class="headerlink" title="32、求出员工领导的薪水超过3000的员工名称与领导"></a>32、求出员工领导的薪水超过3000的员工名称与领导</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> a.ename <span class="hljs-string">&#x27;员工&#x27;</span>,b.ename <span class="hljs-string">&#x27;领导&#x27;</span><br><span class="hljs-keyword">FROM</span> EMP a<br><span class="hljs-keyword">JOIN</span> EMP b<br><span class="hljs-keyword">ON</span> a.mgr<span class="hljs-operator">=</span>b.empno<br><span class="hljs-keyword">WHERE</span> a.sal<span class="hljs-operator">&gt;</span><span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><h4 id="33、求出部门名称中，含’s’字符的部门员工的工资合计、部门人数"><a href="#33、求出部门名称中，含’s’字符的部门员工的工资合计、部门人数" class="headerlink" title="33、求出部门名称中，含’s’字符的部门员工的工资合计、部门人数"></a>33、求出部门名称中，含’s’字符的部门员工的工资合计、部门人数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.dname,<span class="hljs-built_in">COUNT</span>(e.ename),<span class="hljs-built_in">SUM</span>(e.sal)<br><span class="hljs-keyword">FROM</span> DEPT d<br><span class="hljs-keyword">JOIN</span> EMP e<br><span class="hljs-keyword">ON</span> d.deptno<span class="hljs-operator">=</span>e.deptno<br><span class="hljs-keyword">WHERE</span> e.ename <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%S%&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> d.dname;<br></code></pre></td></tr></table></figure><h4 id="34、给任期日期超过三十年的员工加薪10"><a href="#34、给任期日期超过三十年的员工加薪10" class="headerlink" title="34、给任期日期超过三十年的员工加薪10%"></a>34、给任期日期超过三十年的员工加薪10%</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE EMP <br><span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>sal<span class="hljs-operator">*</span><span class="hljs-number">1.1</span> <br><span class="hljs-keyword">WHERE</span> <br>TIMESTAMPDIFF(<span class="hljs-keyword">YEAR</span>,hiredate,NOW())<span class="hljs-operator">&gt;</span><span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP、HTTPS、DNS协议</title>
    <link href="/2021/10/11/HTTP%20HTTPS%20DNS%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/10/11/HTTP%20HTTPS%20DNS%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="HTTP版本详解"><a href="#HTTP版本详解" class="headerlink" title="HTTP版本详解"></a>HTTP版本详解</h3><table><thead><tr><th>HTTP/0.9</th><th>HTTP/1.0</th><th>HTTP/1.1</th><th>HTTP2.0</th></tr></thead><tbody><tr><td>http协议的第一个版本仅适用于数据信息的简介交换，即仅文本传输，只接受GET这一种请求方式，且不支持请求头，由于不支持POST方式，大多数敏感信息无法交换，至此客户端无法向服务器传递过多信息。    <br>缺点: 信息种类过于单一，无法满足需求，串行处理</td><td>第一个在通讯中指定版本号的HTTP协议版本，常用于代理服务器，成为了面向事务的应用层协议，该协议需要每请求一次响应建立并拆除一次连接，1.0引入了POST和HEAD命令，相对于一版本在一定程度上保障的数据的传输安全，是一个典型的串行连接事务。<br>缺点: 串行处理，效率低下</td><td>引入持久连接机制并被默认采用，且更好的配合代理服务器工作，还支持管道方式同一连接下同时发送多个请求，以降低线路负载，提高传输速度，新增方法: PUT、PATCH、OPTIONS、DELETE<br>缺点: 同一TCP连接里，所有通信按次序进行，服务器只能顺序处理回应，如果前面处理过慢，会有许多请求排队，造成队头阻塞(Head-of-line blocking)</td><td>头信息和数据体都是二进制，称为头信息帧和数据帧<br>复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，避免了“队头堵塞“,此双向的实时通信称为多工（Multiplexing）<br>引入头信息压缩机制（header compression）,头信息使用gzip或compress压缩后再发送；客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，不发送同样字段，只发送索引号，提高速度<br>HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送（server push）</td></tr></tbody></table><h3 id="HTTP报文结构"><a href="#HTTP报文结构" class="headerlink" title="HTTP报文结构"></a>HTTP报文结构</h3><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013193441906.png" alt="image-20211013193441906" style="zoom:50%;"><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><ul><li>400：<code>Bad Request</code> 客户端请求的语法错误，服务器无法理解</li><li>401：<code>Unauthorized</code>请求客户端在获取对资源的访问权之前，对自己进行认证</li><li>403：<code>Forbidden</code> 请求被服务器拒绝</li><li>404：<code>Not Found</code> 用于说明服务器无法找到所请求的 URL</li><li>500：<code>Internal Server Error</code> 服务器内部错误，无法完成请求</li><li>502：<code>Bad Gateway</code> 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器收到一个无效的响应</li><li>503：<code>Service Unavailable</code> 用来说明服务器现在无法为该请求提供服务</li><li>504：<code>Gateway Timeout</code> 网关或代理的服务器，未及时从远端服务器获取请求</li></ul><h3 id="HTTPS协议-TLS技术"><a href="#HTTPS协议-TLS技术" class="headerlink" title="HTTPS协议 TLS技术"></a>HTTPS协议 TLS技术</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194256148.png" alt="image-20211013194256148"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194401731.png" alt="image-20211013194401731"></p><h3 id="DNS工作原理"><a href="#DNS工作原理" class="headerlink" title="DNS工作原理"></a>DNS工作原理</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194545402.png" alt="image-20211013194545402"></p><h3 id="DNS工作流程"><a href="#DNS工作流程" class="headerlink" title="DNS工作流程"></a>DNS工作流程</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194616209.png" alt="image-20211013194616209"></p><h3 id="DNS解析现象"><a href="#DNS解析现象" class="headerlink" title="DNS解析现象"></a>DNS解析现象</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194812404.png" alt="image-20211013194812404"></p><ul><li>错误域名解析到纠错导航页面</li><li>错误域名解析到非正常页面</li><li>将正常站点解析到恶意页面</li></ul><h3 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013194946270.png" alt="image-20211013194946270"></p><h3 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h3><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013195026994.png" alt="image-20211013195026994"></p><h3 id="DDoS攻击"><a href="#DDoS攻击" class="headerlink" title="DDoS攻击"></a>DDoS攻击</h3><blockquote><p> 拒绝攻击服务——网络攻击手段，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂停中断或停止，导致其正常用户无法访问</p></blockquote><ul><li>DNS 本质上是一种程序</li><li>物理设备有容量承载极限</li><li>超过容量极限服务可能会宕机</li></ul><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013195354800.png" alt="image-20211013195354800"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20211013195408747.png" alt="image-20211013195408747"></p><h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><ul><li>DNS服务商角度</li><li>个人用户角度</li></ul><p>参考：</p><p><a href="https://blog.csdn.net/weixin_42352759/article/details/103432379">https://blog.csdn.net/weixin_42352759/article/details/103432379</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写单例模式</title>
    <link href="/2021/08/11/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/08/11/%E6%89%8B%E5%86%99%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>确保一个类只有一个实例，并提供一个全局的访问点。</p><p>简单来说单利模式需要保证在整个程序的生命周期中，单例类只存在一个可访问的的实例。这样的应用场景有很多，如线程池或数据库连接池在程序中通常只允许存在一份实例，这时就可以通过单利模式来保证。</p></blockquote><h4 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h4><ul><li>直接创建实例对象，不管你是否需要这个对象都会创建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton1 INSTANCE = <span class="hljs-keyword">new</span> Singleton1();<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton1</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>枚举，最简洁的写法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton2</span> </span>&#123;<br>    INSTANCE<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>静态代码块，可实现复杂的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton3</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton3 INSTANCE;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        INSTANCE = <span class="hljs-keyword">new</span> Singleton3();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton3</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h4><ul><li>延迟创建这个实例对象，等需要是再创建（线程不安全，用于单线程）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton4</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton4 INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton4</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton4 <span class="hljs-title">getINSTANCE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            INSTANCE = <span class="hljs-keyword">new</span> Singleton4();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>双重检验（线程安全）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton5</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton5 INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton5</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton5 <span class="hljs-title">getINSTANCE</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (Singleton5.class)&#123;<br>                <span class="hljs-keyword">if</span>(INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>                    INSTANCE = <span class="hljs-keyword">new</span> Singleton5();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>静态内部类（线程安全）</li></ul><blockquote><p>在内部类被加载和初始化时，才创建INSTANCE实例对象。<br>静态内部类不会自动随着外部类的加载而初始化，它是单独加载和初始化的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton6</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton6</span><span class="hljs-params">()</span></span>&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton6 INSTANCE = <span class="hljs-keyword">new</span> Singleton6();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton6 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Inner.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>场景题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手写生产者消费者模式</title>
    <link href="/2021/08/11/%E6%89%8B%E5%86%99%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <url>/2021/08/11/%E6%89%8B%E5%86%99%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    
    <content type="html"><![CDATA[<p>用多线程模拟生产者消费者模式</p><blockquote><p>在线程世界里，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产 者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这种生产消费能力不均 衡的问题，所以便有了生产者和消费者模式。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.Lock;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">product_customer</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> Lock lock = <span class="hljs-keyword">new</span> ReentrantLock();<br>    <span class="hljs-keyword">private</span> Condition condition = lock.newCondition();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incr</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span> (number!=<span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number++;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;::&quot;</span>+number);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">decr</span><span class="hljs-params">()</span></span>&#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">while</span> (number==<span class="hljs-number">0</span>)&#123;<br>                condition.await();<br>            &#125;<br>            number--;<br>            System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;::&quot;</span>+number);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        product_customer admin = <span class="hljs-keyword">new</span> product_customer();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                admin.incr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                admin.decr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                admin.incr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;C&quot;</span>).start();<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                admin.decr();<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;D&quot;</span>).start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>场景题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛云上传图片</title>
    <link href="/2021/07/21/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2021/07/21/%E4%B8%83%E7%89%9B%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p> <strong>七牛云网址</strong>： <a href="https://portal.qiniu.com/">https://portal.qiniu.com</a></p><p>注册登录就不说了。。。。</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721171906758.png" alt="image-20210721171906758"></p><p>个人中心的密钥，后面要用。</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721172013162.png" alt="image-20210721172013162"></p><p>创建对象存储的服务器，每个人有免费的10个G</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721172159017.png" alt="image-20210721172159017"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721172247996.png" alt="image-20210721172247996"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721172503922.png" alt="image-20210721172503922"></p><p>在 idea 中pom 导入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--七牛云SKD--&gt;<br>   &lt;dependency&gt;<br>       &lt;groupId&gt;com.qiniu&lt;/groupId&gt;<br>       &lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt;<br>       &lt;version&gt;[<span class="hljs-number">7.2</span><span class="hljs-number">.0</span>, <span class="hljs-number">7.2</span><span class="hljs-number">.99</span>]&lt;/version&gt;<br>   &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>在 <code>application.yml</code> 中设置上传文件的限制：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-comment">#   单个文件上限</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">100MB</span><br>      <span class="hljs-comment">#     单次请求所有文件总上限</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">1000MB</span><br></code></pre></td></tr></table></figure><p><code>UploadService</code> 上传服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxxx.uploaddemo.service;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 上传服务</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UploadService</span> </span>&#123;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 上传服务</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> inputStream</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> fileName</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br> <span class="hljs-function">String <span class="hljs-title">upload</span><span class="hljs-params">(InputStream inputStream,String fileName)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现上传文件的类：<code>UploadServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxxx.uploaddemo.service.impl;<br><span class="hljs-keyword">import</span> com.qiniu.common.QiniuException;<br><span class="hljs-keyword">import</span> com.qiniu.http.Response;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Configuration;<br><span class="hljs-keyword">import</span> com.qiniu.storage.Region;<br><span class="hljs-keyword">import</span> com.qiniu.storage.UploadManager;<br><span class="hljs-keyword">import</span> com.qiniu.util.Auth;<br><span class="hljs-keyword">import</span> com.xxxx.uploaddemo.service.UploadService;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 上传服务实现类</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> zyb</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UploadService</span> </span>&#123;<br>     <span class="hljs-meta">@Override</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(InputStream inputStream, String fileName)</span> </span>&#123;<br>         <span class="hljs-comment">//构造一个带指定 Region 对象的配置类</span><br>         Configuration cfg = <span class="hljs-keyword">new</span> Configuration(Region.region0());<br>         <span class="hljs-comment">//...其他参数参考类注释</span><br>         UploadManager uploadManager = <span class="hljs-keyword">new</span> UploadManager(cfg);<br>         <span class="hljs-comment">//...生成上传凭证，然后准备上传</span><br>         String accessKey = <span class="hljs-string">&quot;Ak密钥&quot;</span>;<br>         String secretKey = <span class="hljs-string">&quot;Sk密钥&quot;</span>;<br>         String bucket = <span class="hljs-string">&quot;服务器空间名&quot;</span>;<br>         <span class="hljs-comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span><br>         String key = fileName;<br>         String result = <span class="hljs-keyword">null</span>;<br>         <span class="hljs-keyword">try</span> &#123;<br>             Auth auth = Auth.create(accessKey, secretKey);<br>             String upToken = auth.uploadToken(bucket);<br>             <span class="hljs-keyword">try</span> &#123;<br>                 Response response = uploadManager.put(inputStream,key,upToken,<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);<br>                 <span class="hljs-comment">//解析上传成功的结果</span><br>                 <span class="hljs-keyword">if</span> (response.statusCode==<span class="hljs-number">200</span>)&#123;<br>                 result = <span class="hljs-string">&quot;http://q63yxp74h.bkt.clouddn.com/&quot;</span>+fileName;<br>                 &#125;<br>             &#125; <span class="hljs-keyword">catch</span> (QiniuException ex) &#123;<br>             Response r = ex.response;<br>             System.err.println(r.toString());<br>             <span class="hljs-keyword">try</span> &#123;<br>                 System.err.println(r.bodyString());<br>                 &#125; <span class="hljs-keyword">catch</span> (QiniuException ex2) &#123;<br>                 <span class="hljs-comment">//ignore</span><br>                 &#125;<br>             &#125;<br>         &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>         <span class="hljs-comment">//ignore</span><br>         &#125;<br>         <span class="hljs-keyword">return</span> result;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721173400169.png" alt="image-20210721173400169"></p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721173428628.png" style="zoom:67%;"><p><code>controller</code> 层代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xxxx.uploaddemo.controller;<br><span class="hljs-keyword">import</span> com.xxxx.uploaddemo.service.UploadService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 上传Controller</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> zhoubin</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UploadController</span> </span>&#123;<br>     <span class="hljs-meta">@Autowired</span><br>     <span class="hljs-keyword">private</span> UploadService uploadService;<br>     <span class="hljs-meta">@RequestMapping(&quot;upload&quot;)</span><br>     <span class="hljs-meta">@ResponseBody</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile file)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>         String filename = file.getOriginalFilename();<br>         String date =<br>        DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy/MM/dd/&quot;</span>).format(LocalDateTime.now());<br>         filename =<br>        date+System.currentTimeMillis()+filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>         <span class="hljs-keyword">return</span> uploadService.upload(file.getInputStream(),filename);<br>     &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>前端代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>OSS文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721174539205.png" alt="image-20210721174539205"></p><p>ok了！</p>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>七牛云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复习要点</title>
    <link href="/2021/07/21/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/"/>
    <url>/2021/07/21/%E9%9D%A2%E8%AF%95%E5%A4%8D%E4%B9%A0%E8%A6%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><ul><li>⾯向对象特性：封装，多态（动态绑定，向上转型），继承 </li><li>泛型，类型擦除 </li><li>反射，原理，优缺点 </li><li>static ， final 关键字 </li><li><code>String</code> ， <code>StringBuffer</code> ， <code>StringBuilder</code> 底层区别 </li><li>BIO、NIO、AIO </li><li>Object 类的⽅法 </li><li>⾃动拆箱和⾃动装箱</li></ul><h3 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h3><ul><li>List ： <code>ArrayList</code> 、 <code>LinkedList</code> 、 Vector 、 <code>CopyOnWriteArrayList </code></li><li>Set： <code>HashSet</code> 、 <code>TreeSet</code> 、 <code>LinkedHashSet</code> </li><li>Queue： <code>PriorityQueue</code> </li><li>Map：<code>HashMap</code> ，<code> TreeMap</code> ， <code>LinkedHashMap </code></li><li>fast-fail，fast-safe机制 </li><li>源码分析（底层数据结构，插⼊、扩容过程）、线程安全。</li></ul><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><ul><li>类加载机制、双亲委派模式、3种类加载器<br>（ <code>BootStrapClassLoader</code> ，<code>ExtensionClassLoader</code>， <code>ApplicationClassLoader </code>） </li><li>运⾏时内存分区（PC，Java虚拟机栈，本地⽅法栈，堆，⽅法区（永久代，元空间）） </li><li>JMM：<code>Java</code>内存模型 </li><li>引⽤计数、可达性分析 </li><li>垃圾回收算法：标记-清除，标记-整理，复制 </li><li>垃圾回收器：比较，区别（Serial，<code>ParNew</code>，Parallel Scavenge ，CMS，G1）Stop The World </li><li>强、软、弱、虚引⽤ </li><li>内存溢出、内存泄漏排查 </li><li>JVM调优，常⽤命令</li></ul><h3 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h3><ul><li>三种线程初始化⽅法（ Thread 、 Callable ， Runnable ）区别 </li><li>线程池（ <code>ThreadPoolExecutor</code> ，7⼤参数，原理，四种拒绝策略，四个变型：Fixed， Single，Cached，Scheduled） <ul><li>有界、⽆界任务队列，⼿写 <code>BlockingQueue</code> 。 </li><li>乐观锁：CAS（优缺点，ABA问题，DCAS） </li><li>悲观锁： <ul><li>Synchronized ： 使⽤：⽅法（静态，⼀般⽅法），代码块（this， <code>ClassName.class</code> ） </li><li>1.6优化：锁粗化，锁消除，⾃适应⾃旋锁，偏向锁，轻量级锁 </li><li>锁升级的过程和细节：⽆锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁（不可逆） </li><li>重量级锁的原理（ monitor 对象，<code> monitorenter</code> ,<code>monitorexit</code>） </li><li><code>ReentrantLock</code> ：和 Synchronized 区别？（公平锁、⾮公平锁、可中断 锁….）、原理、⽤法 </li></ul></li><li><code>ThreadLocal</code> ：底层数据结构： <code>ThreadLocalMap</code> 、原理、应⽤场景。 </li><li>Atomic 类（原理，应⽤场景）</li><li>AQS：原理、 <code>Semaphore</code> 、 <code>CountDownLatch</code> 、 <code>CyclicBarrier</code> </li><li>Volatile ：原理：有序性，可⻅性</li></ul></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>架构：Server层，引擎层（缓存，连接器，分析器，优化器，处理器） </li><li>引擎：<code>InnoDB</code>，<code>MyISAM</code>，Memory区别 </li><li>聚簇索引，⾮聚簇索引区别（从⼆叉平衡搜索树复习（AVL，红⿊树）到B树，最后B+树） </li><li>MySQL、SQL优化⽅法 </li><li>覆盖索引，最左前缀匹配 </li><li>当前读，快照读 </li><li>MVCC原理（事务ID，隐藏字段，Undo，<code>ReadView</code>） </li><li>Gap Lock、Next-Key Lock、Record Lock </li><li>三⼤范式</li></ul><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><ul><li>常⽤SQL </li><li>连接：⾃连接，内连接（等值，⾮等值，⾃然连接），外连接（左，右，全） </li><li>Group BY 和 Having </li><li>Explain</li></ul><h3 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h3><ul><li>AOP原理（JDK动态代理，CGLIB动态代理）和 IOC原理 </li><li>Spring Bean⽣命周期 </li><li><code>SpringMVC</code> 原理 </li><li><code>SpringBoot</code>常⽤注解</li></ul><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><ul><li>三种类型：创建、结构、⾏为 </li><li>单例模式：饿汉，懒汉，DCL </li><li>简单⼯⼚，⼯⼚⽅法，抽象⼯⼚ </li><li>代理模式 </li><li>装饰器模式 </li><li>观察者模式</li><li>策略模式 </li><li>迭代器模式 </li><li>….</li></ul><h3 id="计算机⽹络"><a href="#计算机⽹络" class="headerlink" title="计算机⽹络"></a>计算机⽹络</h3><ul><li>OSI模型、TCP/IP模型 </li><li>TCP和UDP区别 </li><li>TCP可靠性传输原理：重传、流量控制、拥塞控制、序列号与确认应达号、校验和 </li><li>三次握⼿、四次挥⼿过程、原理 </li><li><code>timewait</code>、<code>closewait </code></li><li>HTTP <ul><li>报⽂格式 </li><li>1.0 1.1 2.0 </li><li>状态码 </li><li>⽆状态解决（Cookie Session原理） </li></ul></li><li>HTTPS <ul><li>CA证书 </li><li>对称加密 </li><li>⾮对称加密 </li></ul></li><li>DNS解析过程，原理 </li><li>IP协议、ICMP协议（Ping、<code>Tracert</code>）、ARP协议、路由协议 </li><li>攻击⼿段与防范：XSS、CSRF、SQL注⼊、DOS、DDOS</li></ul><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><ul><li>进程、线程和协程区别 </li><li>进程通信⽅式（管道，消息队列，共享内存，信号，信号量，socket）</li><li>进程调度算法（先来先服务，短作业优先，时间⽚轮换，多级反馈队列，优先级调度） </li><li>内存管理：分⻚（⻚⾯置换算法：⼿写LRU）、分段、虚拟内存</li></ul><h3 id="刷算法"><a href="#刷算法" class="headerlink" title="刷算法"></a>刷算法</h3><h3 id="查漏补缺"><a href="#查漏补缺" class="headerlink" title="查漏补缺"></a>查漏补缺</h3>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis逆向工程代码</title>
    <link href="/2021/07/21/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/07/21/MyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="逆向工程-generator的使用"><a href="#逆向工程-generator的使用" class="headerlink" title="逆向工程 generator的使用"></a>逆向工程 generator的使用</h3><p><strong>generator 是什么</strong></p><p>是一个逆向工程，用于自动生成mapper.xml，mapper.java，pojo</p><p><strong>generator能干什么？</strong></p><p>对于单表而言，几乎是一个全能的工具，能很大提高编程效率。更多的关注业务逻辑的实现。</p><ul><li>逆向工程可以自动生成 sql 代码，不用程序员在手动添加了。</li></ul><h4 id="先导入依赖"><a href="#先导入依赖" class="headerlink" title="先导入依赖"></a>先导入依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- mybatis 依赖(让生成的 pojo 和 mapper 不缺少注解相关类型) --&gt;<br>   &lt;dependency&gt;<br>     &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>     &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>   &lt;/dependency&gt;<br>   &lt;!-- mybatis generator core 依赖 --&gt;<br>   &lt;dependency&gt;<br>     &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>     &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;<br>     &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.7</span>&lt;/version&gt;<br>   &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- mybatis generator plugin 依赖 --&gt;<br>     &lt;plugin&gt;<br>       &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>       &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;<br>       &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.7</span>&lt;/version&gt;<br>       &lt;configuration&gt;<br>         &lt;verbose&gt;<span class="hljs-keyword">true</span>&lt;/verbose&gt;<br>         &lt;!-- 是否覆盖 --&gt;<br>         &lt;overwrite&gt;<span class="hljs-keyword">true</span>&lt;/overwrite&gt;<br>         &lt;!-- 自动生成的配置 --&gt;<br>         &lt;configurationFile&gt;src/main/resources/mybatis-generator.xml&lt;/configurationFile&gt;<br>       &lt;/configuration&gt;<br>       &lt;dependencies&gt;<br>         &lt;!-- mysql 数据库依赖 --&gt;<br>         &lt;dependency&gt;<br>           &lt;groupId&gt;mysql&lt;/groupId&gt;<br>           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>           &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;<br>         &lt;/dependency&gt;<br>         &lt;!-- mybatis generator core 依赖 --&gt;<br>         &lt;dependency&gt;<br>           &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;<br>           &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.7</span>&lt;/version&gt;<br>         &lt;/dependency&gt;<br>         &lt;!-- 将项目打包至本地仓库并添加依赖 --&gt;<br>         &lt;dependency&gt;<br>           &lt;groupId&gt;com.example&lt;/groupId&gt;<br>           &lt;artifactId&gt;shop-generator&lt;/artifactId&gt;<br>           &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;<br>         &lt;/dependency&gt;<br>       &lt;/dependencies&gt;<br>     &lt;/plugin&gt;<br></code></pre></td></tr></table></figure><h4 id="mybatis-generator-xml-配置："><a href="#mybatis-generator-xml-配置：" class="headerlink" title="mybatis-generator.xml 配置："></a><code>mybatis-generator.xml</code> 配置：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置生成器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;MysqlTables&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 生成的Java文件的编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;javaFileEncoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 增加Models ToStirng方法 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.ToStringPlugin&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 增加Models Serializable实现 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.mybatis.generator.plugins.SerializablePlugin&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 分页插件 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在example类中增 page 属性，并在mapper.xml的查询中加入page !=null 时的查询 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;plugin type=&quot;org.mybatis.generator.plugins.MySQLPagerPlugin&quot; /&gt; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在example类中增 offset和limit属性，并在mapper.xml的查询中加入limit $&#123;offset&#125; ,</span><br><span class="hljs-comment">       $&#123;limit&#125; 提供在offset和limit&gt;0时的查询 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- &lt;plugin type=&quot;org.mybatis.generator.plugins.MySQLPaginationPlugin&quot;&gt;&lt;/plugin&gt; --&gt;</span><br>        <span class="hljs-comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- type指定生成注释使用的对象 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">commentGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.generator.ShopCommentGenerator&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suppressAllComments&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">commentGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mysql数据库连接配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/shop?</span></span><br><span class="hljs-string"><span class="hljs-tag">useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="hljs-symbol">&amp;amp;</span>tinyInt1isBit=false&quot;</span></span><br><span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        是否忽略BigDecimals 非必填项</span><br><span class="hljs-comment">        自动生成Java对象的时候，会根据number类型的长度不同生成不同的数据类型</span><br><span class="hljs-comment">        number长度   Java类型</span><br><span class="hljs-comment">        1~4         Short</span><br><span class="hljs-comment">        5~9         Integer</span><br><span class="hljs-comment">        10~18       Long</span><br><span class="hljs-comment">        18+         BigDecimal</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;forceBigDecimals&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaTypeResolver</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 以下内容，需要改动 --&gt;</span><br>        <span class="hljs-comment">&lt;!-- java类生成的位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.generator.pojo&quot;</span></span><br><span class="hljs-tag">                            <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个</span><br><span class="hljs-comment">           package下，默认为false --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 从数据库返回的值去除前后空格 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;trimStrings&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaModelGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- *Mapper.xml配置文件生成的位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.generator.mapper&quot;</span></span><br><span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否让schema作为包后缀 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">sqlMapGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- java mapper接口生成的位置(interface) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.example.generator.mapper&quot;</span></span><br><span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 是否让schema作为包后缀 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;enableSubPackages&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">javaClientGenerator</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        指定数据库表</span><br><span class="hljs-comment">        tableName数据库表名</span><br><span class="hljs-comment">        domainObjectName生成的实体类名</span><br><span class="hljs-comment">        是否需要mapper配置文件加入sql的where条件查询,需要将enableCountByExample等设为true,</span><br><span class="hljs-comment">       会生成一个对应domainObjectName的Example类</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;t_goods_images&quot;</span> <span class="hljs-attr">domainObjectName</span>=<span class="hljs-string">&quot;GoodsImages&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableCountByExample</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">enableDeleteByExample</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">enableSelectByExample</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">enableUpdateByExample</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 用于insert时，返回主键的编号 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">generatedKey</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;img_id&quot;</span> <span class="hljs-attr">sqlStatement</span>=<span class="hljs-string">&quot;MySql&quot;</span> <span class="hljs-attr">identity</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ShopCommentGenerator-类："><a href="#ShopCommentGenerator-类：" class="headerlink" title="ShopCommentGenerator  类："></a><code>ShopCommentGenerator </code> 类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.mybatis.generator.api.CommentGenerator;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.IntrospectedColumn;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.IntrospectedTable;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.CompilationUnit;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.Field;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.InnerClass;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.InnerEnum;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.JavaElement;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.Method;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.java.TopLevelClass;<br><span class="hljs-keyword">import</span> org.mybatis.generator.api.dom.xml.XmlElement;<br><span class="hljs-keyword">import</span> org.mybatis.generator.config.PropertyRegistry;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.mybatis.generator.internal.util.StringUtility.isTrue;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成注释配置类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShopCommentGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CommentGenerator</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * properties属性，即配置在 commentGenerator 标签之内的 Property 标签</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Properties properties;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * properties配置文件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Properties systemPro;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 是否生成日期</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> suppressDate;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否生成注释</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> suppressAllComments;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日期格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String currentDateStr;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ShopCommentGenerator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>();<br>        properties = <span class="hljs-keyword">new</span> Properties();<br>        systemPro = System.getProperties();<br>        suppressDate = <span class="hljs-keyword">false</span>;<br>        suppressAllComments = <span class="hljs-keyword">false</span>;<br>        currentDateStr =<br>                DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy/MM/dd&quot;</span>).format(LocalDateTime.now());<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 此方法返回格式化的日期字符串以包含在Javadoc标记中和XML注释。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">getDateString</span><span class="hljs-params">()</span> </span>&#123;<br>    String result = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">if</span> (!suppressDate) &#123;<br>        result = currentDateStr;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从该配置中的任何属性添加此实例的属性CommentGenerator配置。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> properties</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addConfigurationProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.properties.putAll(properties);<br>        suppressDate =<br>                isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_DATE));<br>        suppressAllComments =<br>                isTrue(properties.getProperty(PropertyRegistry.COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS));<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为字段添加注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedColumn</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldComment</span><span class="hljs-params">(Field field, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                IntrospectedColumn introspectedColumn)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (suppressAllComments)<br>            <span class="hljs-keyword">return</span>;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        field.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; * &quot;</span>);<br>        sb.append(introspectedColumn.getRemarks());<br>        field.addJavaDocLine(sb.toString().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>));<br>        field.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Java 属性注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldComment</span><span class="hljs-params">(Field field, IntrospectedTable introspectedTable)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (suppressAllComments)<br>            <span class="hljs-keyword">return</span>;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        field.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; * &quot;</span>);<br>        sb.append(introspectedTable.getFullyQualifiedTable());<br>        field.addJavaDocLine(sb.toString().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>));<br>        field.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为模型类添加注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> topLevelClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addModelClassComment</span><span class="hljs-params">(TopLevelClass topLevelClass, IntrospectedTable</span></span><br><span class="hljs-params"><span class="hljs-function">            introspectedTable)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (suppressAllComments) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        topLevelClass.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        topLevelClass.addJavaDocLine(<span class="hljs-string">&quot; * @author zyb &quot;</span>);<br>        topLevelClass.addJavaDocLine(<span class="hljs-string">&quot; * @since 1.0.0&quot;</span>);<br>        topLevelClass.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Java类的类注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> innerClass</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addClassComment</span><span class="hljs-params">(InnerClass innerClass, IntrospectedTable introspectedTable)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (suppressAllComments) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 获取表注释</span><br>        String remarks = introspectedTable.getRemarks();<br>        innerClass.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        innerClass.addJavaDocLine(<span class="hljs-string">&quot;/* &quot;</span>+remarks);<br>        innerClass.addJavaDocLine(<span class="hljs-string">&quot; * @author zyb &quot;</span>);<br>        innerClass.addJavaDocLine(<span class="hljs-string">&quot; * @since 1.0.0&quot;</span>);<br>        innerClass.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 为类添加注释</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> innerClass</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addClassComment</span><span class="hljs-params">(InnerClass innerClass, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                            <span class="hljs-keyword">boolean</span> b)</span> </span>&#123;<br>    <span class="hljs-comment">// 获取表注释</span><br>    String remarks = introspectedTable.getRemarks();<br>    innerClass.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>    innerClass.addJavaDocLine(<span class="hljs-string">&quot;/* &quot;</span>+remarks);<br>    innerClass.addJavaDocLine(<span class="hljs-string">&quot; * @author zyb &quot;</span>);<br>    innerClass.addJavaDocLine(<span class="hljs-string">&quot; * @since 1.0.0&quot;</span>);<br>    innerClass.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>&#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为枚举添加注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> innerEnum</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addEnumComment</span><span class="hljs-params">(InnerEnum innerEnum, IntrospectedTable introspectedTable)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (suppressAllComments)<br>            <span class="hljs-keyword">return</span>;<br>        StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>        innerEnum.addJavaDocLine(<span class="hljs-string">&quot;/**&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; * &quot;</span>);<br>        sb.append(introspectedTable.getFullyQualifiedTable());<br>        innerEnum.addJavaDocLine(sb.toString().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>));<br>        innerEnum.addJavaDocLine(<span class="hljs-string">&quot; */&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给getter方法加注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedColumn</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addGetterComment</span><span class="hljs-params">(Method method, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 IntrospectedColumn introspectedColumn)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给setter方法加注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedColumn</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSetterComment</span><span class="hljs-params">(Method method, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 IntrospectedColumn introspectedColumn)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通方法的注释，这里主要是XXXMapper.java里面的接口方法的注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> introspectedTable</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addGeneralMethodComment</span><span class="hljs-params">(Method method, IntrospectedTable introspectedTable)</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给Java文件加注释，这个注释是在文件的顶部，也就是package上面。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> compilationUnit</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addJavaFileComment</span><span class="hljs-params">(CompilationUnit compilationUnit)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Mybatis的Mapper.xml文件里面的注释</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> xmlElement</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addComment</span><span class="hljs-params">(XmlElement xmlElement)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 此方法为其添加了自定义javadoc标签。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> javaElement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> markAsDoNotDelete</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addJavadocTag</span><span class="hljs-params">(JavaElement javaElement, <span class="hljs-keyword">boolean</span> markAsDoNotDelete)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 为调用此方法作为根元素的第一个子节点添加注释。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> xmlElement</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addRootComment</span><span class="hljs-params">(XmlElement xmlElement)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addGeneralMethodAnnotation</span><span class="hljs-params">(Method method, IntrospectedTable</span></span><br><span class="hljs-params"><span class="hljs-function">            introspectedTable, Set&lt;FullyQualifiedJavaType&gt; set)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addGeneralMethodAnnotation</span><span class="hljs-params">(Method method, IntrospectedTable</span></span><br><span class="hljs-params"><span class="hljs-function">            introspectedTable, IntrospectedColumn introspectedColumn, Set&lt;FullyQualifiedJavaType&gt; set)</span></span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldAnnotation</span><span class="hljs-params">(Field field, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   Set&lt;FullyQualifiedJavaType&gt; set)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addFieldAnnotation</span><span class="hljs-params">(Field field, IntrospectedTable introspectedTable,</span></span><br><span class="hljs-params"><span class="hljs-function">                                   IntrospectedColumn introspectedColumn, Set&lt;FullyQualifiedJavaType&gt; set)</span> </span>&#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addClassAnnotation</span><span class="hljs-params">(InnerClass innerClass, IntrospectedTable</span></span><br><span class="hljs-params"><span class="hljs-function">            introspectedTable, Set&lt;FullyQualifiedJavaType&gt; set)</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h4><p>然后使用 mybatis-generator 接口。双击就行。</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721091625293.png" alt="image-20210721091625293"></p>]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo搭建个人博客部署到github</title>
    <link href="/2021/07/20/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/"/>
    <url>/2021/07/20/%E5%9F%BA%E4%BA%8EHexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0github/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本篇分享一下个人在搭建博客的时候遇见的各种坑，以及解决的办法。</p></blockquote><blockquote><p>总的来说，搭建博客是很简单的，也不需要语言的基础，新手也可以分分钟搭建出来自己个性的博客，只是需要一个启发，我就是充当这个角色的，网上搭建的方法介绍有很多，我不敢说我的全，但是我敢说跟着我走可以少走很多的弯路，节省很多的时间。</p></blockquote><blockquote><p>我本来也是想部署到 gitee 上的，但是由于 gitee 的原因，只能部署到 github 了，虽然我们之间有一堵墙，但是到目前为止， github 的加载速度还可以哦。</p></blockquote><p>​    言归正传，搭建博客正式开始：</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>我们不管是部署到码云还是<code>github</code>上，我们买不买域名或服务器都可以使用的，部署到这上面。他们会给你生成一个网址，就可以直接进入。如果有域名的话，后面会讲如何把域名搞到你的博客上滴。</li></ul><p><strong>1.安装 Node.js 环境</strong> </p><ul><li>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li></ul><p>安装之后检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>v14.16.1<br>npm -v<br>6.14.12<br></code></pre></td></tr></table></figure><p><strong>2. Hexo 安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720225123355.png" alt="image-20210720225123355"></p><p>检查安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><p><strong>3.创建本地博客文件</strong></p><p>先进入D盘或者F盘，就是你要创建文件的地址盘</p><p>然后进入放置文件的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\yonghu&gt;d:<br>D:\&gt;<span class="hljs-built_in">cd</span> <span class="hljs-built_in">test</span><br>D:\<span class="hljs-built_in">test</span>&gt;hexo init blog<br></code></pre></td></tr></table></figure><p>这里就等待自动创建博客了，后面的操作都在这个博客的文件里进行操作了，我们可以放心大胆在操作，就算出错，我们也可以删掉在创建一个，嘿嘿。</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720230012438.png" alt="image-20210720230012438">看到这里，就说明我们创建成功了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br></code></pre></td></tr></table></figure><p>进入博客文件。</p><p>然后安装博客项目的依赖包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720230330051.png" alt="image-20210720230330051">成功之后，我们可以启动服务看看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>进入 <a href="http://localhost:4000/">http://localhost:4000</a></p><p>我们可以看到一个简单的博客就搭建好了，但是只是本地的，接下来我们就可以把博客部署到gitee或者github上。</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720230633296.png" alt="image-20210720230633296"></p><p>Hexo 上博客的一些操作大家可以去 <a href="https://hexo.io/docs/writing">https://hexo.io/docs/writing</a> 看一看，如果大家看不是太懂，我下一篇会出一些简单的操作。</p><h3 id="博客项目部署-github"><a href="#博客项目部署-github" class="headerlink" title="博客项目部署 github"></a>博客项目部署 github</h3><p><strong>1.登录 github</strong></p><p>首先，部署 github 我们要有账号，没有的去注册（ github 账号程序员必备），<a href="https://github.com/">https://github.com/</a><br>登录之后，点击新建仓库：</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720231348894.png" alt="image-20210720231348894"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720231640726.png" alt="image-20210720231640726"></p><p>创建仓库的名称注意：要和用户名一样，然后加上 <code>.github.io</code> ，在这里我已经创建过了，所以说已经存在了。</p><p>**2.获取 SSH **</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span>  <br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span> <br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>然后连摁三个回车，进入 C:\Users\主机名.ssh 目录，把 id_rsa.pub 里面的信息复制到 github 的 SSH 公钥中即可。</p><p><strong>3.在 github 设置 SSH</strong></p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210721094525633.png" alt="image-20210721094525633" style="zoom:50%;"><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720232956784.png" alt="image-20210720232956784"></p><p>标题随便写，把 id_rsa.pub 里面的信息复制到密钥即可。</p><p><strong>4.在博客项目中安装 git 部署插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><strong>5.修改项目配置文件：</strong>_config.yml</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720233437034.png" alt="image-20210720233437034"></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720233507125.png" alt="image-20210720233507125"></p><p><strong>repo:</strong> 填写刚刚新建仓库的地址</p><p><strong>6.部署 github 远程仓库</strong></p><p>在博客项目中输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo d -g<br></code></pre></td></tr></table></figure><p>github 提交会有超时的情况发生，非常难受，要尝试多次。</p><p>**7.github pages **</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720234317442.png" alt="image-20210720234317442"></p><h3 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h3><p><strong>后面还有许多坑，我先替大家踩了，下一篇分享更换主题，以及主题部分组件的使用。</strong></p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210720234534421.png" alt="image-20210720234534421"></p><p><a href="https://www.somezhao.com/">https://www.somezhao.com/</a>  我的博客。。</p>]]></content>
    
    
    <categories>
      
      <category>搭建与部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试问题（3）</title>
    <link href="/2021/07/19/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%883%EF%BC%89/"/>
    <url>/2021/07/19/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="面试（3）"><a href="#面试（3）" class="headerlink" title="面试（3）"></a>面试（3）</h3><h3 id="char-和-varchar"><a href="#char-和-varchar" class="headerlink" title="char 和 varchar"></a>char 和 varchar</h3><p>1、char(n)类型<br>    char类型时定长的类型，即当定义的是char(10)，输入的是”abc”这三个字符时，它们占的空间一样是10个字节，包括7个空字节。当输入的字符长度超过指定的数时，char会截取超出的字符。而且，当存储char值时，MySQL是自动删除输入字符串末尾的空格。</p><pre><code>char是适合存储很短的、一般固定长度的字符串。例如，char非常适合存储密码的MD5值，因为这是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</code></pre><p>2、varchar(n)类型<br>     varchar(n)类型用于存储可变长的，长度为n个字节的可变长度且非Unicode的字符数据。n必须是介于1和8000之间的数值，存储大小为输入数据的字节的实际长度+1/2. 比如varchar(10), 然后输入abc三个字符，那么实际存储大小为3个字节。除此之外，varchar还需要使用1或2个额外字节记录字符串的长度，如果列的最大长度小于等于255字节（是定义的最长长度，不是实际长度），则使用1个字节表示长度，否则使用2个字节来表示。</p><pre><code>所以，从空间上考虑，varcahr较合适；从效率上考虑，用char合适。二者之间需要权衡。</code></pre><h3 id="数据库-int-后面的数字"><a href="#数据库-int-后面的数字" class="headerlink" title="数据库 int 后面的数字"></a>数据库 int 后面的数字</h3><p>int类型，占用字节数为 4 byte，字节(byte)并非计算机存储的最小单位，还有比字节(byte)更小的单位就是 位(bit)，一个 位(bit)就代表一个0或1；8个 位(bit)组成一个 字节(byte)。<br>计算机存储单位的换算：<br>1byte=8bit<br>1kb=1024byte<br>1m=1024kb<br>那么根据int类型允许存储的字节数是4个字节，就能换算出 int unsigned类型能存储的最小值为0，最大值为4294967295(即4byte=32bit，最大值即是32个1组成)</p><h3 id="short范围"><a href="#short范围" class="headerlink" title="short范围"></a>short范围</h3><p>1、<br>基本类型：short 二进制位数：16<br>包装类：java.lang.Short<br>最小值：Short.MIN_VALUE=-32768 （-2的15此方）<br>最大值：Short.MAX_VALUE=32767 （2的15次方-1）<br>2、<br>基本类型：int 二进制位数：32<br>包装类：java.lang.Integer<br>最小值：Integer.MIN_VALUE= -2147483648 （-2的31次方）<br>最大值：Integer.MAX_VALUE= 2147483647 （2的31次方-1）<br>3、<br>基本类型：long 二进制位数：64<br>包装类：java.lang.Long<br>最小值：Long.MIN_VALUE=-9223372036854775808 （-2的63次方）<br>最大值：Long.MAX_VALUE=9223372036854775807 （2的63次方-1）<br>4、<br>基本类型：float 二进制位数：32<br>包装类：java.lang.Float<br>最小值：Float.MIN_VALUE=1.4E-45 （2的-149次方）<br>最大值：Float.MAX_VALUE=3.4028235E38 （2的128次方-1）<br>5、<br>基本类型：double 二进制位数：64<br>包装类：java.lang.Double<br>最小值：Double.MIN_VALUE=4.9E-324 （2的-1074次方）<br>最大值：Double.MAX_VALUE=1.7976931348623157E308 （2的1024次方-1）</p><table><thead><tr><th>基本类型</th><th>字节数</th><th>位数</th><th>最大值</th><th>最小值</th></tr></thead><tbody><tr><td>byte</td><td>1byte</td><td>8bit</td><td>2^7 - 1</td><td>-2^7</td></tr><tr><td>short</td><td>2byte</td><td>16bit</td><td>2^15 - 1</td><td>-2^15</td></tr><tr><td>int</td><td>4byte</td><td>32bit</td><td>2^31 - 1</td><td>-2^31</td></tr><tr><td>long</td><td>8byte</td><td>64bit</td><td>2^63 - 1</td><td>-2^63</td></tr><tr><td>float</td><td>4byte</td><td>32bit</td><td>3.4028235E38</td><td>1.4E - 45</td></tr><tr><td>double</td><td>8byte</td><td>64bit</td><td>1.7976931348623157E308</td><td>4.9E - 324</td></tr><tr><td>char</td><td>2byte</td><td>16bit</td><td>2^16 - 1</td><td>0</td></tr></tbody></table><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h3 id="final、finally"><a href="#final、finally" class="headerlink" title="final、finally"></a>final、finally</h3><p><a href="https://www.cnblogs.com/ktao/p/8586966.html">https://www.cnblogs.com/ktao/p/8586966.html</a></p><h3 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h3>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试问题（1）</title>
    <link href="/2021/07/18/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%881%EF%BC%89/"/>
    <url>/2021/07/18/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="聊半天项目"><a href="#聊半天项目" class="headerlink" title="聊半天项目"></a>聊半天项目</h3><p>。。。。。（cookie、表的处理 sku、）</p><h3 id="OOM发生场景、怎么排查"><a href="#OOM发生场景、怎么排查" class="headerlink" title="OOM发生场景、怎么排查"></a>OOM发生场景、怎么排查</h3><p>创建一个 ArrayList，while一直添加数字。</p><p><strong>出现的场景</strong>：</p><ol><li>局部数组过大。</li><li>指针或者数组越界</li><li>递归调用层次太多（字符串拷贝等）</li></ol><p><strong>如何排查</strong>：dump 快照文件利用自带的vm等工具分析</p><ol><li>-xx:+HeapDumpOnOutOfMemoryError 参数可以发生OOM时自动进行dump</li><li>jmap 可以手动 dump</li><li>jdk 自带的jvisualvm.exe 进行分析</li></ol><p><strong>如何注意</strong>：</p><ol><li>增大栈空间</li><li>改用动态分配，使用堆（heap）而不是栈（stack）</li><li>直接查询生产环境服务器内存占用情况，通过命令定位到具体的那行代码</li></ol><p>详细参考：<a href="https://www.cnblogs.com/valjeanshaw/p/13130102.html">https://www.cnblogs.com/valjeanshaw/p/13130102.html</a></p><h3 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h3><p><strong>线程私有的：</strong></p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li></ul><p><strong>线程共享的：</strong></p><ul><li>堆</li><li>方法区</li><li>直接内存 (非运行时数据区的一部分)</li></ul><p>详细：<a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F">https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F</a></p><h3 id="程序计数器的作用"><a href="#程序计数器的作用" class="headerlink" title="程序计数器的作用"></a>程序计数器的作用</h3><p><strong>特点</strong>：</p><ul><li>线程私有</li><li>JVM规范中唯一没有规定OutOfMemoryError情况的区域</li><li>如果正在执行的是Native 方法，则这个计数器值为空</li></ul><p><strong>线程私有</strong><br>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现，也就是说，在同一时刻一个处理器内核只会执行一条线程，处理器切换线程时并不会记录上一个线程执行到哪个位置，所以为了线程切换后依然能恢复到原位，每条线程都需要有各自独立的程序计数器。</p><p><strong>为什么没有规定OutOfMemoryError？</strong><br>如上文，程序计数器存储的是字节码文件的行号，而这个范围是可知晓的，在一开始分配内存时就可以分配一个绝对不会溢出的内存。</p><p><strong>为什么执行Native方法，值为空？</strong><br>Native方法大多是通过C实现并未编译成需要执行的字节码指令，也就不需要去存储字节码文件的行号了</p><h3 id="堆的垃圾处理"><a href="#堆的垃圾处理" class="headerlink" title="堆的垃圾处理"></a>堆的垃圾处理</h3><p>详细见下：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6?id=%e6%9c%ac%e6%96%87%e5%af%bc%e7%81%ab%e7%b4%a2">https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6?id=%e6%9c%ac%e6%96%87%e5%af%bc%e7%81%ab%e7%b4%a2</a></p><h3 id="为什么新生代循环15次进入老年代"><a href="#为什么新生代循环15次进入老年代" class="headerlink" title="为什么新生代循环15次进入老年代"></a>为什么新生代循环15次进入老年代</h3><p><strong>因为Object Header（头信息）采用4个bit位来保存年龄，4个bit位能表示的最大数就是15！</strong><br>头信息64位占16个字节，其中Mark Word占8个字节，对象年龄占4个比特位</p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210722224959340.png" alt="image-20210722224959340" style="zoom:30%;"><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210722224927700.png" alt="image-20210722224927700"></p><p>感谢：<a href="https://blog.csdn.net/weixin_43636564/article/details/115507268?utm_term=%E4%B8%BA%E4%BB%80%E4%B9%8815%E6%AC%A1gc&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-115507268&amp;spm=3001.4430">https://blog.csdn.net/weixin_43636564/article/details/115507268?utm_term=%E4%B8%BA%E4%BB%80%E4%B9%8815%E6%AC%A1gc&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-115507268&amp;spm=3001.4430</a></p><h3 id="Collection和Collections的区别"><a href="#Collection和Collections的区别" class="headerlink" title="Collection和Collections的区别"></a>Collection和Collections的区别</h3><p>1、java.util.Collection 是一个<strong>集合接口（集合类的一个顶级接口）</strong>。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java 类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List与Set。</p><p>2、Collections则是集合类的一个工具类/帮助类，其中提供了一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</p><h3 id="集合有哪些，应用场景"><a href="#集合有哪些，应用场景" class="headerlink" title="集合有哪些，应用场景"></a>集合有哪些，应用场景</h3><p>查漏补缺：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/collection/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98">https://snailclimb.gitee.io/javaguide/#/docs/java/collection/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98</a></p><h3 id="HashMap-key可以为空吗？HashTable？"><a href="#HashMap-key可以为空吗？HashTable？" class="headerlink" title="HashMap key可以为空吗？HashTable？"></a>HashMap key可以为空吗？HashTable？</h3><p>HashMap 的 Key 和 Value 都可以为空。HashTable 不可为空，会抛出异常。</p><p>HashMap查漏补缺：</p><p><a href="https://blog.csdn.net/llllllkkkkkooooo/article/details/117264183">https://blog.csdn.net/llllllkkkkkooooo/article/details/117264183</a></p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>去扣细节：</p><p><a href="https://blog.csdn.net/weixin_44460333/article/details/86770169">https://blog.csdn.net/weixin_44460333/article/details/86770169</a></p><h3 id="排序sql语句和limit"><a href="#排序sql语句和limit" class="headerlink" title="排序sql语句和limit"></a>排序sql语句和limit</h3><p>排序：order by id desc(asc) limit 1,2</p><p>提升语句能力：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/database/%E4%B8%80%E5%8D%83%E8%A1%8CMySQL%E5%91%BD%E4%BB%A4">https://snailclimb.gitee.io/javaguide/#/docs/database/%E4%B8%80%E5%8D%83%E8%A1%8CMySQL%E5%91%BD%E4%BB%A4</a></p><h3 id="linux查看日志前几行命令"><a href="#linux查看日志前几行命令" class="headerlink" title="linux查看日志前几行命令"></a>linux查看日志前几行命令</h3><p>1、查看日志 <strong>前 n行</strong>：<br>    　<strong>cat 文件名 | head -n 数量</strong><br>        demo：cat test.log | head -n 200　　# 查看test.log前200行</p><p>2、查看日志 <strong>尾 n行</strong>：<br>    <strong>cat 文件名 | tail -n 数量</strong><br>        demo：cat test.log | tail -n 200　　# 查看test.log倒数200行</p><p>3、根据 <strong>关键词</strong> 查看日志 并<strong>返回关键词所在行</strong>：</p><p>　　<em>方法一：</em><strong>cat 路径/文件名 | grep 关键词</strong></p><p>　　demo：cat test.log | grep “http”　　# 返回test.log中包含http的所有行</p><p>　　<em>方法二：</em><strong>grep -i 关键词 路径/文件名</strong> （与方法一效果相同，不同写法而已）</p><p>　　demo：grep -i “http” ./test.log　　# 返回test.log中包含http的所有行</p><p>转自：<a href="https://home.cnblogs.com/u/hcy-fly/">https://home.cnblogs.com/u/hcy-fly/</a></p><p>linux 其他命令：</p><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/operating-system/linux">https://snailclimb.gitee.io/javaguide/#/docs/operating-system/linux</a></p><h3 id="加油干！"><a href="#加油干！" class="headerlink" title="加油干！"></a>加油干！</h3>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试问题（2）</title>
    <link href="/2021/07/18/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%882%EF%BC%89/"/>
    <url>/2021/07/18/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="面试复盘"><a href="#面试复盘" class="headerlink" title="面试复盘"></a>面试复盘</h3><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><h3 id="mysql查两个id的数据"><a href="#mysql查两个id的数据" class="headerlink" title="mysql查两个id的数据"></a>mysql查两个id的数据</h3><blockquote><p>方法一：查询article表 id=2， id=3， id=5 的数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `article` <span class="hljs-keyword">WHERE</span> INSTR(CONCAT(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;2,3,5&#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>),CONCAT(<span class="hljs-string">&#x27;,&#x27;</span>,id,<span class="hljs-string">&#x27;,&#x27;</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><blockquote><p>方法二：查询article表 id=2， id=3， id=5 的数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `article` <span class="hljs-keyword">WHERE</span> FIND_IN_SET(id,<span class="hljs-string">&#x27;2,3,5&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>方法三：传过来接收的参数是一个类似于：’1,2,3,4,5,6’ 的字符串，这种情况直接用 IN 是无效的，需要把字符串分割再重新组装。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `article` <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">IN</span>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><blockquote><p>1、一般情况 like 模糊查询，前后模糊匹配</p></blockquote><p>这个SQL语句，如果用explain解释的话，我们很容易就能发觉它是没有走索引搜索，而是对全表进行了扫描，这显然是很慢的，还有卡库的可能。去掉前面的 <code>%</code> ,不适合全部的模糊查询。</p><blockquote><p>2、模糊查询高效的方法</p></blockquote><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210822101347905.png" alt="image-20210822101347905" style="zoom:50%;"><p>1、LOCATE（’substr’,str,pos）方法<br>解释：返回 substr 在 str 中第一次出现的位置，如果 substr 在 str 中不存在，返回值为 0 。如果pos存在，返回 substr 在 str 第pos个位置后第一次出现的位置，如果 substr 在 str 中不存在，返回值为0。</p><p>2、POSITION(‘substr’ IN ‘field’)方法<br>其实我们就可以把这个方法当做是locate（）方法的别名，因为它和locate（）方法的作用是一样的。</p><p>3、INSTR(‘str’,’substr’)方法</p><p>4、FIND_IN_SET(str1,str2):</p><h3 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h3><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485117&amp;idx=1&amp;sn=92361755b7c3de488b415ec4c5f46d73&amp;chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&amp;token=79317275&amp;lang=zh_CN%23rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485117&amp;idx=1&amp;sn=92361755b7c3de488b415ec4c5f46d73&amp;chksm=cea24976f9d5c060babe50c3747616cce63df5d50947903a262704988143c2eeb4069ae45420&amp;token=79317275&amp;lang=zh_CN%23rd</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486461&amp;idx=1&amp;sn=60a22279196d084cc398936fe3b37772&amp;chksm=cea24436f9d5cd20a4fa0e907590f3e700d7378b3f608d7b33bb52cfb96f503b7ccb65a1deed&amp;token=1987003517&amp;lang=zh_CN%23rd">https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247486461&amp;idx=1&amp;sn=60a22279196d084cc398936fe3b37772&amp;chksm=cea24436f9d5cd20a4fa0e907590f3e700d7378b3f608d7b33bb52cfb96f503b7ccb65a1deed&amp;token=1987003517&amp;lang=zh_CN%23rd</a></p><h3 id="索引为啥快？多了就好吗？"><a href="#索引为啥快？多了就好吗？" class="headerlink" title="索引为啥快？多了就好吗？"></a>索引为啥快？多了就好吗？</h3><p><a href="https://zhuanlan.zhihu.com/p/111709826?from_voters_page=true">https://zhuanlan.zhihu.com/p/111709826?from_voters_page=true</a></p><p><a href="https://www.cnblogs.com/leeee/p/14533181.html">https://www.cnblogs.com/leeee/p/14533181.html</a></p><h3 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h3><p><a href="https://www.runoob.com/w3cnote/http-vs-https.html">https://www.runoob.com/w3cnote/http-vs-https.html</a></p><h3 id="get和post"><a href="#get和post" class="headerlink" title="get和post"></a>get和post</h3><p><a href="https://www.runoob.com/tags/html-httpmethods.html">https://www.runoob.com/tags/html-httpmethods.html</a></p><h3 id="mybatis对应关系"><a href="#mybatis对应关系" class="headerlink" title="mybatis对应关系"></a>mybatis对应关系</h3><p><a href="https://blog.csdn.net/xinge2016/article/details/80830483">https://blog.csdn.net/xinge2016/article/details/80830483</a></p><h3 id="data注解？缺点"><a href="#data注解？缺点" class="headerlink" title="data注解？缺点"></a>data注解？缺点</h3><p><a href="https://edu.51cto.com/study/9023">https://edu.51cto.com/study/9023</a></p><h3 id="bean注解和Component注解"><a href="#bean注解和Component注解" class="headerlink" title="bean注解和Component注解"></a>bean注解和Component注解</h3><p><a href="https://blog.csdn.net/weixin_35544490/article/details/112143211">https://blog.csdn.net/weixin_35544490/article/details/112143211</a></p><p>1.作用对象不同：@Component 注解作用于类，而 @Bean 注解作用于方法、<br>2.@Component 通常是通过路径扫描来自动侦测以及自动装配到 Spring 容器中(我们可以使用@ComponentScan 注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean 容器中)。@Bean 注解通常是我们在标有该注解的方法中定义产生这个 bean，@Bean 告诉了 Spring 这是某个类的实例，当我们需要用它的时候还给我。<br>3.@Bean 注解比 @Component 注解的自定义性更强，而且很多地方我们只能通过 @Bean 注解来注册 bean。比如当我们引用第三方库中的类需要装配到 Spring 容器时，只能通过 @Bean 来实现。</p><h3 id="redis多线程？（结果面试官说单线程）"><a href="#redis多线程？（结果面试官说单线程）" class="headerlink" title="redis多线程？（结果面试官说单线程）"></a>redis多线程？（结果面试官说单线程）</h3><p><a href="https://blog.csdn.net/bird73/article/details/79792548">https://blog.csdn.net/bird73/article/details/79792548</a></p><h3 id="异常处理？多个异常处理？"><a href="#异常处理？多个异常处理？" class="headerlink" title="异常处理？多个异常处理？"></a>异常处理？多个异常处理？</h3><p><a href="https://blog.csdn.net/qq_39696563/article/details/106809445">https://blog.csdn.net/qq_39696563/article/details/106809445</a></p><h3 id="aop"><a href="#aop" class="headerlink" title="aop"></a>aop</h3><p><a href="https://blog.csdn.net/q982151756/article/details/80513340">https://blog.csdn.net/q982151756/article/details/80513340</a></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2021/07/18/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/07/18/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="List：可重复"><a href="#List：可重复" class="headerlink" title="List：可重复"></a>List：可重复</h3><p>非常常用的数据类型，是有序的Collection。</p><blockquote><p>ArrayList：基于数组实现，增删慢，查询快，线程不安全</p><blockquote><p>是使用最广泛的List实现类，提供<code>add</code> <code>remove</code> <code>get</code> 功能</p><p>必须连续存储，导致中间插入和删除时的代价高，更适合随机查询和遍历的操作</p><p>不需要定义数组长度，在长度不够时，ArrayList会创建一个更大的数组并把原有的数据复制到新的数组中</p></blockquote></blockquote><blockquote><p>Vector：基于数组实现，增删慢，查询快，线程安全</p><blockquote><p>支持线程同步，即同一时刻只允许一个线程对Vector进行操作</p><p>但是需要对Vector实例进行频繁的加锁和解锁操作，效率低</p></blockquote></blockquote><blockquote><p>LinkedList：基于双向链表实现，增删快，查询慢，线程不安全</p><blockquote><p>查询时，需要从头结点一直遍历到该节点，所以速度慢</p></blockquote></blockquote><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><ul><li>ArrayBlockingQueue：基于数组数据结构实现的有界阻塞队列</li><li>LinkendBlockingQueue：基于链表数据结构实现的有界阻塞队列</li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列</li><li>DelayQueue：支持延迟操作的无界阻塞队列</li><li>SynchronousQueue：用于线程同步的阻塞队列</li><li>LinkedTransferQueue：基于链表数据结构实现的无界阻塞队列</li><li>LinkedBlockingDeque：基于链表数据结构实现的双向阻塞队列</li></ul><h3 id="Set-不可重复"><a href="#Set-不可重复" class="headerlink" title="Set 不可重复"></a>Set 不可重复</h3><p>核心特性是独一无二，适用于存储无序且值不相等的元素。</p><blockquote><p>HashSet：HashMap实现，无序</p><blockquote><p>存放的是散列值，按照元素的散列值来存取元素</p><p>hashCode方法、equals方法来判断是否为同一元素</p></blockquote></blockquote><blockquote><p>TreeSet：二叉树实现</p><blockquote><p>每添加一个元素，都会按照指定顺序排序</p></blockquote></blockquote><blockquote><p>LinkHashSet：继承HashSet，HashMap实现数据存储，双向链表记录顺序</p><blockquote><p>实现较简单，提供四个构造方法，在底层构造一个LinkedHashMap来记录数据访问</p><p>其他相关操作与父类相同，直接调用父类方法即可</p></blockquote></blockquote><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><blockquote><p>HashMap：数组+链表存储数据，线程不安全</p><blockquote><p>基于键的HashCode值唯一标识一条数据，可以快速地更新和查询数据</p><p>可使用synchronizedMap方法使HashMap具有安全的线程</p><p>Java8对此进行优化，当元素超过8个后，HashMap会将链表结构转换为红黑树结构来提高查询效率</p><p>常用参数：</p><ul><li>capacity：当前数组容量，默认16,可以扩容两倍</li><li>loadFactor：负载因子，0.75</li><li>threshold：扩容的阈值，值为上面两参数乘积</li></ul></blockquote></blockquote><blockquote><p>ConcurrentHashMap：分段锁实现，线程安全</p><blockquote><p>由多个Segmen组成（segmen的数量也是锁的并发度）</p><p>concurrentLevel参数表示并行级别，默认16</p></blockquote></blockquote><blockquote><p>HashTable：线程安全</p><blockquote><p>遗留类，很多映射的常用功能都与HashMap类似，线程安全，并发性不如ConcurrentHashMap</p></blockquote></blockquote><blockquote><p>TreeMap：基于二叉树数据结构</p><blockquote><p>默认按键值的升序排序，常用于实现排序的映射列表</p></blockquote></blockquote><blockquote><p>LinkedHashMap：继承HashMap，使用链表保存插入顺序</p><blockquote><p>当通过Iterator遍历LinkedHashMap时，会按照元素的插入顺序访问元素</p></blockquote></blockquote><h2 id="异常分类及处理"><a href="#异常分类及处理" class="headerlink" title="异常分类及处理"></a>异常分类及处理</h2><h3 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h3><p>异常指在方法不能按照正常方式完成时，可以通过抛出异常的方式退出方法，在异常中封装了方法执行过程中的错误及原因，调用方可以在获取异常后根据业务的情况处理该异常或者继续抛出该异常。</p><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>Throwable是所有错误和异常的父类，error有AWTError、ThreadDeath，Exception分为RuntimException和CheckedException</p><ul><li>RuntimeException：JVM正常运行期间抛出异常，可以捕获并处理<ul><li>NullPointerException</li><li>ClassCastException</li><li>ArrayIndexOutOfBundsException等</li></ul></li><li>CheckedException：编译阶段会检查异常biang强制程序捕获和处理此类异常，即<code>try catch</code> <ul><li>IOException</li><li>SQLException</li><li>ClassNotFoundException等</li></ul></li></ul><h3 id="异常处理方式"><a href="#异常处理方式" class="headerlink" title="异常处理方式"></a>异常处理方式</h3><ul><li>抛出异常<ul><li>不进行处理，抛给调用者，调用者根据情况处理</li><li>三种形式：<ul><li>throws：作用方法上</li><li>throw：作用方法内</li><li>系统自动抛出异常</li></ul></li></ul></li><li>使用<code>try catch</code> 捕获并处理异常<ul><li>有针对性处理异常</li></ul></li></ul><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><h3 id="动态语言的概念"><a href="#动态语言的概念" class="headerlink" title="动态语言的概念"></a>动态语言的概念</h3><p>动态语言指运行时可以改变结构的语言</p><ul><li>JS、Python、Ruby等都属于动态语言</li><li>C、C++不属于动态语言</li><li>从反射角度来说，Java属于半动态语言</li></ul><h3 id="反射机制的概念"><a href="#反射机制的概念" class="headerlink" title="反射机制的概念"></a>反射机制的概念</h3><p>在程序运行中，对任意一个雷都能获取其所有属性和方法，并且对任意一个对象都能调用其任意一个方法。</p><h3 id="反射的应用"><a href="#反射的应用" class="headerlink" title="反射的应用"></a>反射的应用</h3><p>Java中对象有两种类型：编译时类型和运行时类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Person person = <span class="hljs-keyword">new</span> Student();<br></code></pre></td></tr></table></figure><p>编译时为Person，运行时为Student；</p><p>因此，程序在编译时无法预测对象和类的真实信息，只能通过运行时信息来发现该对象和类的真实信息，而真实信息通常通过反射机制来获取，这便是Java语言中反射机制的核心功能。</p><h3 id="Java的常用反射API"><a href="#Java的常用反射API" class="headerlink" title="Java的常用反射API"></a>Java的常用反射API</h3><ul><li>Class类：用于获取类的属性、方法等信息</li><li>Field类：表示类的成员变量，用于获取和设置类的属性值</li><li>Method类：表示类的方法，用于获取方法的描述信息或者执行某个方法</li><li>Constructor类：表示类的构造方法。</li></ul><h3 id="反射的步骤"><a href="#反射的步骤" class="headerlink" title="反射的步骤"></a>反射的步骤</h3><ul><li><p>获取想要操作的类的Class对象，该Class对象是反射的核心，通过他可以调用类的任意方法</p><ul><li><p>调用某个对象的getClass方法以获取该类对应的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Person person = <span class="hljs-keyword">new</span> Person();<br>Class clazz = person.getClass();<br></code></pre></td></tr></table></figure></li><li><p>调用某个类的class属性以获取该类对应的Class对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz = person.class;<br></code></pre></td></tr></table></figure></li><li><p>调用Class类中的forName静态方法以获取该类的Class对象，这是最安全。性能最好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class clazz = Class.forName(<span class="hljs-string">&quot;fullClasspath&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>调用Class对象所对应的类中定义的方法，这是反射的使用阶段</p></li><li><p>使用反射API来获取并调用类的属性和方法等信息</p></li></ul><h3 id="创建对象的两种方式"><a href="#创建对象的两种方式" class="headerlink" title="创建对象的两种方式"></a>创建对象的两种方式</h3><ul><li>使用Class对象的newInstance方法创建Class对象的实例</li><li>先使用Class对象获取指定的Constructor对象，再调用Constructor对象的newInstance方法创建Class对象的实例</li></ul><h3 id="Method-的-invoke-方法"><a href="#Method-的-invoke-方法" class="headerlink" title="Method 的 invoke 方法"></a>Method 的 invoke 方法</h3><ul><li>获取Method对象：调用Class的getMethod方法，</li><li>调用invoke方法：动态执行函数</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="注解的概念"><a href="#注解的概念" class="headerlink" title="注解的概念"></a>注解的概念</h3><p>注解是Java提供的设置程序中元素的关联信息和元数据的方法，它是一个接口，程序可以通过反射获取指定程序中元素的注解对象，然后通过该注解对象获取注解中的元数据信息。</p><h3 id="标准元注解"><a href="#标准元注解" class="headerlink" title="标准元注解"></a>标准元注解</h3><p>元注解负责注解其他注解。</p><ul><li>@Target：说明了注解所修饰的对象范围</li><li>@Retention：定义了该注解被保留的级别，即在什么级别有效</li><li>@Documented：表明该注解应该被javadoc工具记录，因此可以被javadoc类的工具文档化</li><li>@Inherited：标记注解，表明某个注解是被继承的</li></ul><h3 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h3><ul><li>定义注解接口   <code>@interface</code></li><li>使用注解接口   <code>@+接口名</code></li><li>定义注解处理器</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类通过<code>外部类.静态内部类</code> 调用</p><p>和外部类关系密切且不依赖外部类实例的类，可以使用静态内部类实现。</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>定义在类内部的非静态类叫做成员内部类，不能定义静态方法和变量（除final）</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>定义在方法中的类叫做局部内部类，当一个类只需要在某个方法中使用某个特定的类时，可以通过局部类实现</p><h3 id="匿名内部李"><a href="#匿名内部李" class="headerlink" title="匿名内部李"></a>匿名内部李</h3><p>通过接口或继承的方式直接定义并使用的类，没有<code>class</code> 关键字</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型标记和泛型限定"><a href="#泛型标记和泛型限定" class="headerlink" title="泛型标记和泛型限定"></a>泛型标记和泛型限定</h3><ul><li>E：Element，在集合中使用，表示在集合中存放的元素</li><li>T：Type，表示Java类，包括基本的类和我们自定义的类</li><li>K：Key，表示键，比如Map的key</li><li>V：Value，表示值</li><li>N：Number，表示数值类型</li><li>？：表示不确定的Java类型</li></ul><p><strong>1、对泛型上限的限定：<code>&lt;? extends T&gt;</code></strong></p><ul><li>表示该通配符所代表的类型是T类的子类或者接口T的子接口</li></ul><p><strong>2、对泛型下限的限定：<code>&lt;? super T&gt;</code></strong></p><ul><li>表示该通配符所代表的类型是T类de父类或者父接口</li></ul><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>泛型方法是将方法的参数类型定义为泛型，以便在调用时接收不同类型的参数。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类指在定义类时在类上定义泛型，以便在使用时可以根据传入的不同参数类型实例化不同的对象。</p><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>和泛型类相似</p><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><p>在编码阶段使用泛型时加上的类型参数，会被编译器在编译时去掉，这个过程就被称为类型擦除</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化常用于持久化对象，RPC（远程过程调用），或者网络传输</p><h3 id="Java-序列化-API-的使用"><a href="#Java-序列化-API-的使用" class="headerlink" title="Java 序列化 API 的使用"></a>Java 序列化 API 的使用</h3><ul><li>实现<code>Serializable</code>接口</li><li>序列化和反序列化必须保持序列化的 ID 一致，一般使用<code>private static final long serialVersionUID</code>定义序列化 ID</li><li>序列化不保存静态变量</li><li>在需要序列化父类变量时，父类也需要实现<code>Serializable</code>接口</li><li>使用<code>Transient</code>关键字可以阻止该变量被序列化，在反序列化后，<code>Transient</code>变量的值被设为对应类型的初始值。</li><li><code>Transient</code>和<code>static</code>修饰的变量不会被序列化</li></ul><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>在Java生态中有很多优秀的序列化框架。比如：arvo，protobuf，thrift，fastjson</p><p>我们可以基于JDK原生的<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>类实现对象的序列化和反序列化，并调用其writeObject和readObject方法实现自定义序列化策略。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2021/07/18/JVM/"/>
    <url>/2021/07/18/JVM/</url>
    
    <content type="html"><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM的运行机制"><a href="#JVM的运行机制" class="headerlink" title="JVM的运行机制"></a>JVM的运行机制</h2><ul><li>Java Virtual Machine 是用于运行Java字节码的虚拟机。</li><li>JVM运行到操作系统之上，不与硬件设备直接交互。</li></ul><h3 id="Java程序的运行过程"><a href="#Java程序的运行过程" class="headerlink" title="Java程序的运行过程"></a>Java程序的运行过程</h3><p>1、Java源文件被编译器编译成字节码文件。</p><p>2、JVM将字节码文件编译成相应操作系统的机器码。</p><p>3、机器码调用相应操作系统的本地方法库执行相应的方法。</p><img src="/C:/Users\赵翌博\Pictures\JVM.jpg" alt="JVM虚拟机" style="zoom:50%;"><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210815222611301.png" alt="image-20210815222611301"></p><ul><li>类加载器子系统用于将编译好的.Class文件加载到JVM中；</li><li>运行时数据区用于存储在JVM运行过程中产生的数据，包括程序计数器、方法区、本地方法区、虚拟机栈和虚拟机堆；</li><li>执行引擎包括即时编译器和垃圾回收堆，即时编译器用于将Java字节码编译成具体的机器码，垃圾回收器用于回收在运行过程中不再使用的对象；</li><li>本地接口库用于调用操作系统的本地方法库完成具体的指令操作。  </li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li>在多核操作系统上，JVM允许一个进程内同时并发执行多个线程。</li></ul><blockquote><p>JVM后台运行的主要线程</p><blockquote><p>虚拟机线程</p><p>周期性任务线程</p><p>GC线程</p><p>编译器线程</p><p>信号分发线程</p></blockquote></blockquote><h2 id="JVM的内存区域"><a href="#JVM的内存区域" class="headerlink" title="JVM的内存区域"></a>JVM的内存区域</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><blockquote><p>线程私有，无内存溢出问题。</p></blockquote><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><blockquote><p>线程私有，描述Java方法的执行过程。</p></blockquote><h3 id="本地方法区"><a href="#本地方法区" class="headerlink" title="本地方法区"></a>本地方法区</h3><blockquote><p>线程私有</p></blockquote><ul><li>与虚拟机栈作用类似，区别是虚拟机栈为执行Java方法服务，本地方法栈为Native方法服务。</li></ul><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><blockquote><p>也叫运行时数据区，线程共享。</p></blockquote><ul><li>现代JVM采用分代收集算法，因此Java堆从CG角度还可以细分为：新生代、老生代和永久代。</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><blockquote><p>线程共享</p></blockquote><ul><li>永久代</li></ul><h2 id="JVM运行时内存"><a href="#JVM运行时内存" class="headerlink" title="JVM运行时内存"></a>JVM运行时内存</h2><ul><li>新生代占1/3堆内存，Eden区默认占8/10，SurvivorFrom区和SurvivorTo区各占1/10；</li><li>老年代占2/3堆内存；</li><li>永久代占的非常少。</li></ul><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><ul><li>Eden区，新创建的对象放在这里，如果是大对象则直接分配到老年代，内存不足时会触发MinorGC，进行垃圾回收。</li><li>SurvivorTo区，保留上一次GC时的幸存者。</li><li>SurvicorFrom区，将上一次GC时的幸存者作为这次GC的被扫描者。</li><li>MinorGC会被频繁触发。</li></ul><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><ul><li>存放长生命周期的对象和大对象。</li><li>MajorGC不会频繁触发</li></ul><h3 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h3><ul><li>内存的永久保存区域</li><li>存放Class和Meta信息</li><li>在Java 8中，永久代被元数据区替代，内存不受JVM的影响，直接使用操作系统的内存。</li></ul><h2 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h2><h3 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h3><blockquote><p>1、引用计数法</p><blockquote><ul><li><p>引用对象时+1，删除引用时-1，如果计数为0时，则表示可以回收；</p><p>弊端</p><ul><li>容易产生循环引用问题，指两个对象相互引用，导致引用一直存在，而不能回收。</li></ul></li></ul></blockquote></blockquote><blockquote><p>2、可达性分析</p></blockquote><h3 id="Java中常用的垃圾回收算法"><a href="#Java中常用的垃圾回收算法" class="headerlink" title="Java中常用的垃圾回收算法"></a>Java中常用的垃圾回收算法</h3><ul><li><p>标记清除算法</p><ul><li>基础垃圾回收算法，效率低，内存碎片多。</li></ul></li><li><p>复制算法</p><ul><li>解决上一算法问题而设计的，划分两个区域</li><li>效率高，易于实现。</li><li>内存空间被压缩一半，存在大量的内存浪费</li><li>处理大量长时间存活的对象时，来回复制会影响效率，所以只对<code>朝生夕死</code>状态的对象运行效率高。</li></ul></li><li><p>标记整理算法</p><ul><li>结合上两种算法的优点</li></ul></li><li><p>分代收集算法</p><ul><li>由于上面三种方法都不能对所有类型的对象都进行垃圾回收，故产生此种方法。</li><li>新生代都采用复制算法，老年代则采用标记清除算法。</li><li>新生代：JVM运行过程中主要使用Eden区和SurvivoForm区，进行GC时会将这两个区存活的对象复制到SurvivorTo区，然后清理两区空间。</li><li>老年代：主要存放的都是生命周期长和大对象，每次只有少量非存活的对象被清理回收。</li><li>Survivor区的对象经过一次GC后依然存活，则年龄+1，年龄达到15后进入老年区；或因无法找到连续的存储空间存储对象，依然会移入老年区。</li></ul></li></ul><h2 id="Java中4种引用类型"><a href="#Java中4种引用类型" class="headerlink" title="Java中4种引用类型"></a>Java中4种引用类型</h2><ul><li><p>强引用</p><ul><li>最常见，把一个对象赋值给一个引用对象。</li><li>一定为可达性状态，所以不会被垃圾回收机制回收。</li><li>强引用是造成Java内存泄漏的主要原因。</li></ul></li><li><p>软引用</p><ul><li>SoftReference，如果对象只有软引用时，则系统内存不足时该对象将被回收。</li></ul></li><li><p>弱引用</p><ul><li>WeakReference，只用弱引用时，在回收过程中一定会被回收。</li></ul></li><li><p>虚引用</p><ul><li>PhantomReference，虚引用和引用队列联合使用，用于跟踪对象的垃圾回收状态。</li></ul></li></ul><h2 id="分代收集算法和分区收集算法"><a href="#分代收集算法和分区收集算法" class="headerlink" title="分代收集算法和分区收集算法"></a>分代收集算法和分区收集算法</h2><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>1、新生代与复制算法</p><p>2、老年代与标记整理算法</p><h3 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h3><p>划分大小不同的小区域，在每个小区域内单独进行内存使用和垃圾回收。</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><ul><li><p>新生代</p><ul><li>Serial垃圾收集器：单线程，复制算法。<ul><li>简单、高效，对于单CPU环境来说，效率最高</li><li>是JVM运行在Client模式下新生代的默认垃圾收集器</li></ul></li><li>ParNew垃圾收集器：多线程，复制算法。<ul><li>同上；是JVM在Server模式下新生代的默认垃圾收集器</li></ul></li><li>Parallel Scavnge垃圾收集器：多线程，复制算法<ul><li>在系统吞吐量上有很大的优化</li></ul></li></ul></li><li><p>老年代</p><ul><li><p>Serial Old垃圾收集器：单线程，标记整理算法</p><ul><li>是JVM运行在Client模式下老年代的默认垃圾收集器</li></ul></li><li><p>Parallel Old垃圾收集器：多线程，标记整理算法</p><ul><li>优先考虑吞吐量，其次考虑停顿时间等因素</li></ul></li><li><p>CMS垃圾收集器：多线程，标记清除算法</p><ul><li>目的：使用最短的垃圾回收停顿时间完成垃圾回收，不需要暂停用户线程</li><li>工作机制复杂：初始标记、并发标记、重新标记、并发清除</li></ul></li></ul></li><li><p>G1垃圾收集器</p><ul><li>将堆内存划分为大小固定大的几个独立区域，同时后台维护一个优先级列表</li><li>相对于CMS的两个突出改进<ul><li>基于标记整理算法，不产生内存碎片</li><li>可以精确地控制停顿时间，在不牺牲吞吐量的前提下实现最短停顿垃圾回收。</li></ul></li></ul></li></ul><h2 id="Java网络编程模型"><a href="#Java网络编程模型" class="headerlink" title="Java网络编程模型"></a>Java网络编程模型</h2><h3 id="阻塞I-O模型"><a href="#阻塞I-O模型" class="headerlink" title="阻塞I/O模型"></a>阻塞I/O模型</h3><ul><li>最常见的I/O模型</li><li>发送I/O请求后，内核会检查数据是否就绪，此时用户线程一直阻塞等待内存数据就绪；就绪后，内核将数据复制到用户线程中，并返回I/O执行结果到用户线程，此时用户线程会解除阻塞并开始处理数据。</li><li>例子：data=socket.read()，如果内核没有就绪，Socket线程会一直阻塞在read()中等待就绪。</li></ul><h3 id="非阻塞模型"><a href="#非阻塞模型" class="headerlink" title="非阻塞模型"></a>非阻塞模型</h3><ul><li><p>发送I/O请求后，无须阻塞便可以马上得到内核返回的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>    data = socket.read();<br>    <span class="hljs-keyword">if</span>(data == <span class="hljs-keyword">true</span>)&#123; <span class="hljs-comment">//1.内核数据就绪</span><br>        <span class="hljs-comment">//获取并处理内核数据</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">//2.内核数据未就绪，用户线程处理其他任务</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="多路复用I-O模型"><a href="#多路复用I-O模型" class="headerlink" title="多路复用I/O模型"></a>多路复用I/O模型</h3><ul><li>多线程并发编程用的较多的模型</li><li>用一个被称为Selector的线程不断轮询多个Socket的状态，只有在Socket读写时才会通知用户线程进行I/O读写操作</li><li>只有在Socket读写事件时才会使用操作系统的I/O资源，大大的节约了系统资源</li><li>在连接数众多但信息体不大时，有很大的的优势，相反，在事件响应体（信息体）很大时，Selector线程会成为性能瓶颈，导致后面的事件不能及时处理，影响下一轮的事件轮询。</li></ul><h3 id="信号驱动I-O模型"><a href="#信号驱动I-O模型" class="headerlink" title="信号驱动I/O模型"></a>信号驱动I/O模型</h3><ul><li>发起I/O请求时，系统为该请求对应的Socket注册一个信号函数；在内核数据就绪时，系统发送信号到用户线程，用户线程会在信号函数中调用对应的I/O读写操作完成实际的I/O请求操作</li></ul><h3 id="异步I-O模型"><a href="#异步I-O模型" class="headerlink" title="异步I/O模型"></a>异步I/O模型</h3><ul><li>用户线程不用关系整个I/O操作是如何进行的，只需发起一个请求，在接收到内核返回的成功或失败信号时说明I/O操作已经完成，直接使用数据即可。</li><li>需要操作系统的底层支持，在Java7中提供了<code>Asynchronous I/O</code>操作</li></ul><h3 id="Java-I-O"><a href="#Java-I-O" class="headerlink" title="Java I/O"></a>Java I/O</h3><ul><li>5个类：<code>File</code> <code>OutputStream</code> <code>InputStream</code> <code>Writer</code> <code>Reader</code> </li><li>1个接口：<code>Serializabe</code> </li></ul><h3 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h3><ul><li><p>三大核心 <code>Selector</code> <code>Channel</code> <code>Buffer</code> </p><blockquote><p>Java NIO和传统I/O的最大区别</p><p>（1）I/O是面向流的，NIO面向缓冲区；</p><p>（2）传统I/O的流操作是阻塞模式的，NIO的流操作是非阻塞模式的；</p></blockquote></li><li><p>Channel：和I/O中Stream类似，但是既可以用来<code>读</code>也可以用来<code>写</code> ;</p></li><li><p>Buffer：一个容器，在一个连续的字节数组存储I/O数据，Channel的读写需经过Buffer；</p></li><li><p>Selector：用于检查多个Channel上是否有I/O事件发生；</p></li></ul><h2 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h2><h3 id="JVM的类加载阶段"><a href="#JVM的类加载阶段" class="headerlink" title="JVM的类加载阶段"></a>JVM的类加载阶段</h3><ul><li>加载：指JVM读取Class文件，并根据Class文件描述创建java.lang.Class对象的过程</li><li>验证：只有通过验证的Class文件才能被JVM加载</li><li>准备：在方法区中为类变量分配内存空间并设置类中变量的初始值<ul><li>final可以改变变量在准备阶段的初始值</li></ul></li><li>解析：JVM会将常量池中的符号引用替换为直接引用</li><li>初始化：主要通过执行类构造器的<code>&lt;client&gt;</code> 方法为类进行初始化；<code>&lt;client&gt;</code> 方法是在编译阶段由编译器自动收集类中静态语句块和变量的赋值操作组成的<ul><li>常量在编译时会将其常量值存入使用该常量的类的常量池中，该过程不需要调用常量所在的类，不触发常量类的初始化</li><li>在子类引用父类的静态字段时，不会触发子类，但会触发父类的初始化</li><li>定义对象数组，不会触发该类的初始化</li><li>在使用类名获取Class对象时不会触发类的初始化</li><li>在使用Class.forName加载指定的类时，可以通过initialize参数设置是否需要对类进行初始化</li><li>在使用ClassLoader默认的loadClass方法加载类时不会触发该类的初始化</li></ul></li></ul><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul><li>启动类加载器：负责加载Java_HOME/lib目录中的类库</li><li>扩展类加载器：负责加载Java_HOME/lib/ext目录中的类库</li><li>应用程序类加载器：负责加载用户路径上的类库</li></ul><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><ul><li>保障类的唯一性和安全性</li></ul><h3 id="OSGL"><a href="#OSGL" class="headerlink" title="OSGL"></a>OSGL</h3><ul><li>Java动态化模块系统的一系列规范</li><li>OSGL提供了一种面向服务的架构，该架构为组件提供动态发现其他组件的功能</li><li>OSGL还定义了这些规范所依赖的服务和架构</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式缓存的原理及应用</title>
    <link href="/2021/07/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <url>/2021/07/18/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式缓存的原理及应用"><a href="#分布式缓存的原理及应用" class="headerlink" title="分布式缓存的原理及应用"></a>分布式缓存的原理及应用</h1><blockquote><p>缓存指将需要频繁访问的数据存放在内存中以加快用户访问速度的一种技术。</p><p>缓存分进程级缓存和分布式缓存</p></blockquote><h2 id="分布式缓存介绍"><a href="#分布式缓存介绍" class="headerlink" title="分布式缓存介绍"></a>分布式缓存介绍</h2><p>分布式缓存是相当于传统的进程内缓存而言的，对于传统的单点 Web 系统一般使用进程内缓存，而在微服务架构下往往需要一个分布式缓存来实现跨服务的缓存系统。</p><h2 id="Ehcache-的原理及应用"><a href="#Ehcache-的原理及应用" class="headerlink" title="Ehcache 的原理及应用"></a>Ehcache 的原理及应用</h2><blockquote><p>Ehcache 是基于 Java实现的一套简单、高效、线程安全的缓存管理类库。特点是快速、轻量、可伸缩、操作灵活、支持持久化。</p></blockquote><h3 id="Ehcache-的原理"><a href="#Ehcache-的原理" class="headerlink" title="Ehcache 的原理"></a>Ehcache 的原理</h3><blockquote><p>基于Java实现的高效缓存框架，其内部采用多线程实现，采用LinkedHashMap 存储元素，同时支持将数据持久化到物理磁盘上</p></blockquote><p><strong>特点</strong></p><ul><li>快速：Ehcache 内部采用多线程机制实现，数据存取性能高。</li><li>轻量：Ehcache 的安装包大小只有 1.6 MB，可以快速、方便地继承到系统中。</li><li>可伸缩：Ehcache 缓存在内存和硬盘的存储可以伸缩到数几十 GB ，可以轻松应对大数据场景。</li><li>操作灵活：Ehcache 提供丰富的 API 接口，可实现基于主键、条件进行数据读取。同时，支持在运行时修改缓存配置，提高系统维护的灵活性。</li><li>支持多中淘汰算法：Ehcache 支持最近最少被使用、最少被使用和先进先出缓存淘汰机制。</li><li>支持持久化：支持将缓存数据持久化到磁盘上，在机器重启后从磁盘上重新加载缓存数据。</li></ul><p><strong>架构</strong></p><blockquote><p>由 Cache Replication、In-Process API 和 Core组成</p></blockquote><ul><li>Cache Replication 存储缓存副本</li><li>In-Process API 封装操作缓存数据的 API</li><li>Core 是核心部分</li><li>NetWork APIs提供接口</li></ul><p><strong>Ehcache 的存储方式</strong></p><ul><li>堆存储：存 Java堆内存，存取速度快，但容量有限。</li><li>堆外存储：基于 NIO 的DirectByteBuffers 实现，将缓存数据存储在堆外内存上。特点是比磁盘存取速度快，而且不受 GC 的影响，可以保证响应时间的稳定性，在内存分配上开销比堆内存大，存取速度慢。</li><li>磁盘存储：存储到磁盘，，保障服务器重启后内存数据能够重新从磁盘上加载，读取效率最低，是内存数据持久化的一种方式。</li></ul><p><strong>扩展模块</strong></p><blockquote><p>Ehcache是开放的缓存系统，除自身的实现外还有其他扩展模型，这些扩展模型是相互独立的库，每个都为Ehcache添加新的功能。</p></blockquote><h3 id="Ehcache-的应用"><a href="#Ehcache-的应用" class="headerlink" title="Ehcache 的应用"></a>Ehcache 的应用</h3><p>Spring Boot 中使用 Ehcache 组件比较简单</p><ul><li>引入 jar 包</li><li>设置 ehcache.xml</li><li>使用 Ehcache 缓存</li></ul><h2 id="Redis-的原理及应用"><a href="#Redis-的原理及应用" class="headerlink" title="Redis 的原理及应用"></a>Redis 的原理及应用</h2><blockquote><p>Redis 是一个开源（BSD许可）的内存中的数据结构存储系统，可以用作内存数据库、缓存和消息中间件，支持多种类型的数据结构。</p></blockquote><h3 id="Redis-的原理"><a href="#Redis-的原理" class="headerlink" title="Redis 的原理"></a>Redis 的原理</h3><blockquote><p>不但支持丰富的数据类型，还支持分布式事务、数据分片、数据持久化等功能，是分布式系统中不可或缺的内存数据库服务。</p></blockquote><p><strong>数据类型</strong></p><p>八种数据类型：String、Hash、List、Set、Zset、Bitmap（位图）、HyperLogLog（超级日志）和Geospatial（地理空间）。</p><ul><li>String<ul><li>String 是 Redis 基本的数据类型，一个 key 对应一个 value 。String 类型的值最大能存储 512 MB 数据。</li><li>支持丰富的操作指令。</li></ul></li><li>Hash<ul><li>Redis Hash 是一个键值（key-&gt;value）对集合。</li></ul></li><li>List<ul><li>简单的字符串列表，按照插入顺序排序。</li><li>我们可以添加一个元素到头部或尾部。</li></ul></li><li>Set<ul><li>Set 是 String 类型的无序集合。集合是通过散列表实现的，所以增删改的复杂度都是O(1)。</li></ul></li><li>ZSet<ul><li>也是 String 类型元素的集合，且不允许有重复的成员。</li><li>不同的是，每个元素都会关联一个 double 类型的分数。正是通过分数来为集合中的成员进行从小到大的排序的。</li></ul></li><li>Bitmap<ul><li>通过操作二进制位记录数据。</li><li>常用命令：setbit、getbit、bitcount、destkey</li></ul></li></ul><p><strong>Redis 管道</strong></p><p>Redis 是基于请求/响应协议的 TCP 服务。</p><p>在分布式环境下，Redis 的性能瓶颈主要体现在网络延迟上。</p><p>Redis 的管道技术指在服务武器未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端响应。</p><p><strong>Redis 事务</strong></p><p>事务执行流程：</p><ul><li>事务开启：客户端执行 Multi 命令开启事务。</li><li>提交请求：客户端提交命令到事务。</li><li>任务入队列：Redis 将客户端请求放入事务队列中等待执行。</li><li>入队状态反馈：服务器返回 QURUD，表示命令已被放入事务队列。</li><li>执行命令：客户端通过 Exec 执行事务。</li><li>事务执行错误:在 Redis 事务中如果某条命令执行错误，则其他命令会继续执行，不会回滚。可通过 WATCH 监控事务执行的状态并处理命令执行错误的异常情况。</li><li>执行结果反馈：服务器向客户端返回事务执行结果。</li></ul><p>事务相关命令：</p><ul><li>Multi：标记一个事务块的开始。</li><li>Exec：执行所有事务块内的命令。</li><li>Discard：取消事务，放弃事务块的所有命令。</li><li>Watch：监视一个或多个 Key ，如果在事务执行之前这些key被其他命令改动，那么事务将被打断。</li><li>Unwatch：取消 Watch 命令对所有key的监视。</li></ul><p>Redis 事务基于 SpringBoot 的使用：</p><ul><li>开启事务权限</li><li>开启事务</li><li>执行事务命令</li><li>执行成功，提交事务</li><li>执行失败，回滚事务</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><p><strong>Redis 发布、订阅</strong></p><p>Redis 发布、订阅是一种消息通信模式：发送者（Pub）向频道（Channel）发送消息，订阅者（Sub）接收频道上的消息。</p><p><strong>Redis 集群数据复制的原理</strong></p><p>Redis 提供了复制功能，可以实现在主数据库（Master）中的数据更新后，自动将更新的数据同步到从数据库（Slave）。</p><p>主从数据复制原理：</p><ul><li>一个从数据库启动后，会向主数据库发送 SYNC 命令。</li><li>主数据库接收后，会开始在后台保存快照（即 RDB 持久化的过程），并将保存快照期间接收到的命令缓存起来。</li><li>在主数据库快照执行完成后，Redis 会将快照文件和所有缓存的命令以 .rdb 快照文件的形式发送给从数据库。</li><li>从数据库接收后，载入该快照文件到本地。</li><li>从数据库载入后，将数据写入内存。该过程称为复制初始化。</li><li>复制初始化结束后，主数据库在每次收到命令时都会将命令同步给从数据库，从而保证主从数据库数据一致。</li></ul><p><strong>Redis 的持久化</strong></p><ul><li>RDB （Redis DataBase)<ul><li>在指定时间间隔内对数据进行快照存储。</li><li>特点：文件格式紧凑，方便进行数据传输和数据恢复。</li></ul></li><li>AOF（Append Of File）<ul><li>记录对服务器的每次写操作，在 Redis 重启时会重放这些命令来恢复数据。</li><li>特点：可以使用不同的 fsync 策略将操作追加命令到文件，操作效率高；</li><li>同时，AOF 文件时日志格式，更容易被理解和操作。</li></ul></li></ul><p><strong>Redis 的集群模式及工作原理</strong></p><blockquote><p>三种集群模式：主从模式、哨兵模式、集群模式</p></blockquote><ul><li><p>主从模式：所有写请求都发送到主数据库上，再由主数据库将数据同步到从数据库上。</p><ul><li>主数据库主要用于执行写操作和数据同步，从数据库主要用于执行读操作缓解系统的读压力。</li></ul></li><li><p>哨兵模式：在主从模式上添加一个哨兵的角色来监控集群的运行状态。</p><ul><li>哨兵是一个独立运行的进程，在监测到 Master 宕机时会自动 Slave 切换成 Master ，然后通过发布与订阅模式通知其他从服务器修改配置文件，完成主备热切。</li></ul></li><li><p>集群模式：实现了在多个 Redis 节点之间进行数据分片和数据复制。</p><ul><li>基于 Redis 集群的数据自动分片能力，我们能够方便地对 Redis 集群进行横向扩展，以提高 Reids 集群的吞吐量。</li></ul></li></ul><h3 id="Redis-的应用"><a href="#Redis-的应用" class="headerlink" title="Redis 的应用"></a>Redis 的应用</h3><p><strong>安装 Redis</strong></p><ul><li>下载 Redis 软件</li><li>编译和安装</li><li>创建 Redis 节点</li><li>配置 Redis 集群</li><li>启动节点</li><li>创建集群</li></ul><h2 id="分布式缓存设计的核心问题"><a href="#分布式缓存设计的核心问题" class="headerlink" title="分布式缓存设计的核心问题"></a>分布式缓存设计的核心问题</h2><blockquote><p>分布式缓存设计的核心问题是以哪种方式进行缓存预热和缓存更新，以及如何优雅解决缓存雪崩、缓存穿透、缓存降级等问题。</p></blockquote><h3 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h3><p>​    指在用户请求数据前先将数据加载到缓存系统中，用户查询事先被预热的缓存数据，以提高系统查询效率。</p><p>缓存预热一般有系统启动加载、定时加载等方法。</p><h3 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h3><p>常见的缓存更新策略</p><ul><li>定时更新：定时将底层数据库内的数据更新到缓存中，该方法比较简单，适合需要缓存的数据量不是很大的应用场景。</li><li>过期更新：定时将缓存中过期的数据更新为最新的数据并更新缓存的过期时间。</li><li>写请求更新：在用户有些请求时先写数据库同时更新缓存，这适用于用户对缓存数据和数据库的数据有实时强一致性的情况</li><li>读请求更新：在用户读请求时，先判断该请求数据的缓存是否存在或过期，如果不存在或者已过期，则进行底层数据库查询并将查询结果更新到缓存中，同时将查询结果返回给用户。</li></ul><h3 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h3><ul><li>FIFO：判断被存储的时间，离目前最远的数据优先被淘汰。</li><li>LRU（最近最少使用）：判断缓存最近被使用的时间，距离当前时间最远的数据优先被淘汰。</li><li>LFU（最不经常使用）：在一段时间内，被使用次数最少的缓存优先被淘汰。</li></ul><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>缓存雪崩指同一时刻由于大量缓存失效，导致大量本应该访问缓存的请求都去查询数据库了</p><p>这样对数据库的 CPU 和内存造成巨大压力，严重的导致数据库宕机，从而形成连锁反应，导致系统崩溃。</p></blockquote><p>处理方法：</p><ul><li>请求加锁：对于并发量不是很多的应用，使用请求加锁排队的方案防止过多请求数据库。</li><li>失效更新：为每个缓存数据都增加过期标记来记录缓存数据是否失效，如果缓存标记失效，则更新数据库缓存。</li><li>设置不同的失效时间：为不同数据设置不同失效时间，防止在同一时刻有大量数据失效。</li></ul><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><blockquote><p>由于缓存系统故障或用户频繁访问系统中不存在的数据，而这时请求穿过缓存不断被发送到数据库，导致数据库过载，进而引发一连串问题。</p></blockquote><p>解决方法：</p><ul><li>布隆过滤器：指将可能存在的数据都映射到一个足够大的 BitMap 中，在用户发起请求时首先进过布隆过滤器的拦截，一个一定不存在的数据会被这个布隆过滤器拦截，从而避免对底层存储系统带来查询上的压力。</li><li>cache null 策略：在缓存中记录一个短暂的数据在系统中是否存在的状态，如果不存在，则直接返回null ，不再查询数据库，从而避免缓存穿透到数据库上。</li></ul><h3 id="缓存降级"><a href="#缓存降级" class="headerlink" title="缓存降级"></a>缓存降级</h3><blockquote><p>由于访问量剧增导致服务出现问题时，优先保障核心业务的运行，减少或关闭非核心业务对资源的使用</p></blockquote><p>常见的服务降级策略</p><ul><li>写降级</li><li>读降级</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库及分布式事务</title>
    <link href="/2021/07/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2021/07/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库及分布式事务"><a href="#数据库及分布式事务" class="headerlink" title="数据库及分布式事务"></a>数据库及分布式事务</h1><h2 id="数据库的基本概念及原则"><a href="#数据库的基本概念及原则" class="headerlink" title="数据库的基本概念及原则"></a>数据库的基本概念及原则</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><blockquote><p>数据库的存储引擎是数据库的底层软件组织，数据库管理系统（DBMS）使用存储引擎创建、更新、删除和查询数据。</p></blockquote><p><strong>MyIASM</strong></p><p>MyIASM 是 MySQL 默认的存储引擎，不支持数据库事务、行级锁和外键，因此在 INSERT 或 UPDATE 数据时需要锁定整个表，效率较低。</p><p>在执行读取操作的速度快，且占用的内存和存储资源较少。在设计之初就假设数据被组织成固定长度的记录，并且是按照顺序存储的。<br>在查找数据时，MyIASM 直接查找文件的 OFFSET ,定位比 InnoDB 要快（InnoDB 寻址时要先映射到块，再映射到行）。</p><p>MyIASM 缺点是更新数据慢且不支持事务处理，优点是查询速度快。</p><p><strong>InnoDB</strong></p><p>InnoDB 为MySQL 提供了事务支持、回滚、崩溃修复能力、多版本并发控制、事务安全的操作。<br>InnoDB 底层存储结构为 B+ 树，B+树的每个节点都对应 InnoDB 的一个 Page，Page 的大小是固定的，一般被设置16KB。<br>非叶子节点只有键值，叶子节点包含完整的数据。</p><p>InnoDB 使用场景</p><ul><li>经常有数据更新的表，适合处理多重并发更新请求。</li><li>支持事务</li><li>支持灾难恢复（通过 bin-log 日志恢复）</li><li>支持外键约束，只有 InnoDB 支持外键</li><li>支持自动增加列属性 auto_increment</li></ul><p><strong>TokuDB</strong></p><p>TokuDB 的底层存储结构为 Fractal Tree。Fractal Tree 的结构与 B+树有些类似，只是Fractal Tree 中除了每一个指针，都需要指向一个 child（孩子）节点，child 节点带一个 Message Buffer，该 Message Buffer 是一个先进先出队列，用来缓存更新操作。</p><p>在线添加索引，不影响读写操作，有非常高的写入性能，主要适用于要求写入速度快、访问频率不高的数据或历史数据归档。</p><p><strong>Memory</strong></p><p>Memory 表使用内存空间创建。每个 Memory 表实际上都对应一个磁盘文件用于支持数据持久化。<br>因为数据是存在内存中，因此访问速度非常快，通常使用 Hash 索引来实现数据索引</p><p>缺点：一旦服务关闭，表中数据将会丢失。</p><p>支持散列索引和 B 树索引</p><h3 id="创建索引的原则"><a href="#创建索引的原则" class="headerlink" title="创建索引的原则"></a>创建索引的原则</h3><blockquote><p>创建索引是提高数据库查询数据效率最常用的办法，也是很重要的办法。</p></blockquote><ul><li>选择唯一性索引：唯一性索引一般基于 Hash 算法实现，可以快速、唯一地定位某条数据。</li><li>为经常需要排序、分组和联合操作的字段建立索引。</li><li>为经常作为查询条件的字段建立索引。</li><li>限制索引的数量：索引越多，数据更新表越慢，因为数据更新时会不断计算和添加索引。</li><li>尽量使用数据量少的索引：如果索引的值很长，则占用的磁盘较大，查询速度会受到影响。</li><li>尽量使用前缀来索引：如果索引字段的值过长，则不但影响索引的大小，而且会降低索引的执行效率，需使用字段的部分前缀来作为索引。</li><li>删除不再使用或者很少使用的索引。</li><li>尽量选择区分度高的列作为索引：区分度表示字段值不重复的比例</li><li>索引列不能参与计算：带函数的查询不建议参与索引</li><li>尽量扩展现有索引：联合索引的查询效率比多个独立索引高。</li></ul><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><p>范式是具有最小冗余的表结构</p><p><strong>第一范式</strong></p><p>每列都是不可再分的最小数据单元（也叫最小原子单元），则满足第一范式。<br>第一范式的目标是确保每列的原子性。</p><p><strong>第二范式</strong></p><p>在第一范式的基础上，规定表中的非主键列不存在对主键的部分依赖，即第二范式要求每个表只描述一件事情。</p><p><strong>第三范式</strong></p><p>满足第一范式和第二范式，并且表中列不存在对非主键的传递依赖。</p><h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><blockquote><p>数据库事务执行一系列基础操作，这些基础操作组成一个逻辑工作单元一起向数据库提交，要么都执行，要么都不执行。</p><p>事务是一个不可分割的工作逻辑单元。</p></blockquote><p><strong>ACID</strong></p><ul><li>原子性：事务是一个完整操作，参与事务逻辑单元要么都执行，要么都不执行。</li><li>一致性：在事务执行完毕时（无论是正常执行完毕还是异常结束），数据都必须处于一致状态。</li><li>隔离性：对数据进行修改的所有并发事务都是彼此隔离的，他不应以任何方式影响其他事务。</li><li>永久性：在事务操作完成后，对数据的修改将被持久化到永久性存储中。</li></ul><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><blockquote><p>存储过程指一组用于完成特定功能的 SQL 语句集，它被存储在数据库中，经过第一次编译后再次调用时不需要被再次编译，用户通过指定存储过程的名字并给出参数来执行它。</p></blockquote><p><strong>常见的存储过程优化思路</strong></p><ul><li>尽量用一些 SQL 语句代替一些小循环，例如聚合函数、求平均函数等。</li><li>中间结果被存放与临时表中，并加索引。</li><li>少使用游标：SQL 是种集合语言，对于集合运算有较高的性能，而游标是过程运算。</li><li>事务越短越好：SQL Server 支持并发操作，如果事务过长或者隔离级别过高，则都会造成并发操作的阻塞、死锁，导致查询速度极慢、CPU 占用率高等。</li><li>使用 try-catch 处理异常。</li><li>尽量不要将查询语句放入循环中，防止出现过度消耗系统资源的情况。</li></ul><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器是一段能自动执行的程序，和普通存储过程的区别是“触发器在对某一个表或者数据进行操作时触发”。</p><p>触发器用于数据变化后需要执行一系列操作的情况。比如：对系统核心数据的修改需要通过触发器来存储操作日志的信息。</p><h2 id="数据库的并发操作和锁"><a href="#数据库的并发操作和锁" class="headerlink" title="数据库的并发操作和锁"></a>数据库的并发操作和锁</h2><h3 id="数据库的并发策略"><a href="#数据库的并发策略" class="headerlink" title="数据库的并发策略"></a>数据库的并发策略</h3><ul><li><strong>乐观锁</strong><ul><li>乐观锁在读取数据时，认为别人不会去写其所读的数据；悲观锁恰恰相反，觉得自己读数据时，别人可能刚好在写自己刚读的数据。时间戳在操作数据时不加锁，而是通过时间戳来控制并发出现的问题。</li></ul></li><li><strong>悲观锁</strong><ul><li>悲观锁在其修改数据时，不允许别人读取数据，直到自己整个事务都提交并释放锁，其他用户才能访问数据。</li><li>悲观锁又可分为排它锁（写锁）和共享锁（读锁）。</li></ul></li><li><strong>时间戳</strong><ul><li>在数据表中额外加一个时间戳列 TimeStamp 。每次读取数据时，都把时间戳也读出来，在更新时把时间戳加1，在提交之前跟数据库的该字段比较一次，如果比数据库的值大，就允许保存，否则不允许保存。</li><li>这种处理方式虽然不用数据库系统提供的锁机制，但是可以大大提高数据库处理的并发度。</li></ul></li></ul><h3 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h3><p><strong>行级锁</strong></p><p>指对某行数据加锁，是一种排它锁，防止其他事务修改此行。</p><p>行级冲突少，但加锁速度慢。</p><p><strong>表级锁</strong></p><p>指对当前操作的整张表加锁，它的实现简单，资源消耗较少，被大部分存储引擎支持。最常使用的 MyISAM 和  InnoDB 都支持表级锁。</p><p>表级锁分为表共享读锁和表独占写锁。</p><p>表级锁加锁速度快，但冲突多。</p><p><strong>页级锁</strong></p><p>锁定粒度介于行级锁和表级锁之间。在两者之间做了平衡，一次锁定相邻的一组记录。</p><p><strong>基于 Redis 的分布式锁</strong></p><blockquote><p>数据库锁是基于单个数据库实现的，在我们的业务跨多个数据库时，就要使用分布式锁来保证数据的一致性。</p></blockquote><p>以<code>Redis setnx</code> 命令为中心实现</p><ul><li>获取锁：在获取锁时调用 setnx ，如果返回 0，则该锁正在被别人使用；如果返回1，则获取成功。</li><li>释放锁：在释放锁时，判断锁是否存在，如果存在，则执行 Redis 的 delete 操作释放锁。</li></ul><h3 id="数据库分表"><a href="#数据库分表" class="headerlink" title="数据库分表"></a>数据库分表</h3><ul><li>垂直切分<ul><li>将表按照功能模块、关系密切程度将表划分到不同的库中。</li><li>DB–&gt;workDB、payDB.</li></ul></li><li>水平切分<ul><li>在一个表中的数据量过大时（一般在数据超过 1 亿条后），我们可以把该表按照某种规则如 userId 散列进行划分，然后将其存储到多个具有相同表结构的数据库上。</li><li>userDB–&gt;userDB1(userId/2=0)、userDB2(userId/2=1).</li></ul></li></ul><h2 id="数据库分布式事务"><a href="#数据库分布式事务" class="headerlink" title="数据库分布式事务"></a>数据库分布式事务</h2><h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><blockquote><p>CAP 原则又称CAP定理，指在一个分布式系统中，一致性、可用性和分区容错性三者不可兼得。</p></blockquote><ul><li>一致性：在分布式系统的所有数据备份中，在同一时刻是否有同样的值（等同于所有节点都访问同一份最新的数据副本）。</li><li>可用性：在集群中一部分节点发生故障后，集群整体能否响应客户端的读写请求（对数据更新具备高可用性）。</li><li>分区容错性：系统如果不能在时限内达到数据的一致性，就意味着发生了分区，必须就当前操作在 C 和 A 之间做出选择。<br>以实际效果而言，分区相当于对通信的时限要求。</li></ul><h3 id="两阶段提交协议"><a href="#两阶段提交协议" class="headerlink" title="两阶段提交协议"></a>两阶段提交协议</h3><blockquote><p>分布式事务指涉及操作多个数据库的事务，在分布式系统中，各个节点之间在物理上相互独立，通过网络进行沟通和协调。</p></blockquote><p>二阶段提交协议指在计算机网络及数据库领域内，为了使分布式数据库的所有节点在进行事务提交时都保持一致性而设计的一种算法。</p><p>在分布式系统中，每个节点都可以知道自己的操作是否成功，但不知道其它节点的操作是否成功。</p><blockquote><p>在一个事务跨越多个节点时，为了保持事务的 ACID 特性，需要引入一个作为协调者的组件来统一掌控所有节点（称作参与者）的操作结果，并最终确定这些节点是否真正提交操作结果。</p></blockquote><ul><li>Prepare（准备阶段）<ul><li>事务协调者（事务管理器）给每个参与者（源管理器）都发送 Prepare 消息。每个参与者要么直接返回失败，要么在本地执行事务，写本地的 redo 和 undo 日志但不提交，是一种“万事俱备，只欠东风”的状态。</li></ul></li><li>Commit（提交阶段）<ul><li>如果协调者接收到了参与者的失败消息或者等待超时，则直接给每个参与者都发送回滚消息，否则发送提交消息，参与者根据协调者的指令执行提交或者回滚操作，释放在所有事务处理过程使用的锁资源。</li></ul></li></ul><p><strong>两阶段提交的缺点</strong></p><ul><li>同步阻塞问题</li><li>单点故障</li><li>数据不一致</li><li>协调者宕机后事务状态丢失</li></ul><p>两阶段三阶段具体信息：</p><p><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1623831009&amp;ver=3133&amp;signature=UoeIFv-jZi8CjNTp-fKKd8Aax-D75ZzN64zg-SbPOkpYhd5JgW3J-Stct3XG155JOiThZOD6YFJ3y6J7T2rPrFXTyEBVHvqUpjAT2QGDhC5ElGJD5aQXE4tytXNncKaj&amp;new=1">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1623831009&amp;ver=3133&amp;signature=UoeIFv-jZi8CjNTp-fKKd8Aax-D75ZzN64zg-SbPOkpYhd5JgW3J-Stct3XG155JOiThZOD6YFJ3y6J7T2rPrFXTyEBVHvqUpjAT2QGDhC5ElGJD5aQXE4tytXNncKaj&amp;new=1</a></p><h3 id="三阶段提交协议"><a href="#三阶段提交协议" class="headerlink" title="三阶段提交协议"></a>三阶段提交协议</h3><blockquote><p>3PC ，是2PC的改进版本</p></blockquote><ul><li>引入超时机制</li><li>在第 1 阶段和第 2 阶段都加入一个预准备阶段，以保证在最后的任务提交之前各参与节点的状态是一致的。</li></ul><p><strong>三个阶段</strong></p><ul><li>CanCommit 阶段<ul><li>协调者给参与者发送 Commit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应</li></ul></li><li>PreCommit 阶段<ul><li>协调者根据参与者的反应决定是否继续：</li><li>假如协调者从所有参与者哪里获得的反馈都是 Yes 响应，就预执行事务。</li><li>假如有任意参与者发送 No 响应或者等待超时，则执行事务的中断。</li></ul></li><li>DoCommit 阶段<ul><li>进行真正的事务提交</li></ul></li></ul><h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p><strong>传统事务</strong></p><p>传统事务遵循 ACID 原则。</p><ul><li>原子性</li><li>一致性</li><li>隔离性</li><li>持久性</li></ul><p><strong>柔性事务</strong></p><blockquote><p>基于CAP理论和BASE理论，阿里巴巴提出了柔性事务的概念。</p><p>BASE理论是CAP理论的延伸，包括基本可用、柔性状态、最终一致性三个原则，并基于这三个原则设计出了柔性事务。</p></blockquote><p>我们常说的柔性事务分为：两阶段型、补偿性、异步确保型、最大努力通知型。</p><p>**<em>两阶段型事务</em> **</p><p>指分布式事务的两阶段提交，对应技术上的 XA 和 JTA/JTS，是分布式环境下事务处理的典型模式。</p><p><strong><em>TCC型事务</em>（Try、Confirm、Cancel）</strong></p><p>TCC型事务为补偿性事务，是一种基于补偿的事务处理模型。</p><p>TCC 事务模型牺牲了一定的隔离性和一致性，但是提高了事务的可用性。</p><p>如：服务器A和服务器B的事务都顺利执行提交，则整个事务执行结束。如果事务B执行失败回滚，事务A执行成功提交了，则需要一个补偿操作，将已经提交的事务A进行回滚操作，恢复到未执行前事务A的状态。</p><p><em><strong>异步确保型事务</strong></em></p><p>基于消息队列异步执行的操作，来避免分布式事务中同步阻塞带来的数据操作性能下降。</p><p><em><strong>最大努力通知型事务</strong></em></p><p><a href="https://mp.weixin.qq.com/s?src=11&amp;timestamp=1623833676&amp;ver=3133&amp;signature=BWIOpWsTAf8153oLp6v6aulPxK2o95oeeot0F0MhCjK8xS2TwSRPcPRZSETTD2Du6lDWWp7ZF2mxuonvkAw1C4Fv6v5us1W8IJtz*RmfWhHcJPgq2i6nYnrUOaW1DVc*&amp;new=1">https://mp.weixin.qq.com/s?src=11&amp;timestamp=1623833676&amp;ver=3133&amp;signature=BWIOpWsTAf8153oLp6v6aulPxK2o95oeeot0F0MhCjK8xS2TwSRPcPRZSETTD2Du6lDWWp7ZF2mxuonvkAw1C4Fv6v5us1W8IJtz*RmfWhHcJPgq2i6nYnrUOaW1DVc*&amp;new=1</a></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络与负载均衡</title>
    <link href="/2021/07/18/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2021/07/18/%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="网络与负载均衡"><a href="#网络与负载均衡" class="headerlink" title="网络与负载均衡"></a>网络与负载均衡</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><blockquote><p>网络是信息传输、接收、共享的虚拟平台，将各个点、面、题的信息联系到一起，从而实现这些资源的共享。</p></blockquote><h4 id="OSI-七层网络模型"><a href="#OSI-七层网络模型" class="headerlink" title="OSI 七层网络模型"></a>OSI 七层网络模型</h4><ul><li>物理层<ul><li>定义物理设备标准，它的主要作用是传输比特流，具体做法是在发送端将 1、0 码转化为电流强弱来进行传输，在到达目的地后再将电流强弱转化为1、 0 码。–模数转化和数模转化，这一层的数据叫做<code>比特</code>。</li></ul></li><li>数据链路层<ul><li>主要用于对数据包中的 MAC 地址进行解析和封装。这一层的数据叫做<code>帧</code> </li><li>工作设备是：<code>网卡</code> <code>网桥</code> <code>交换机</code></li></ul></li><li>网络层<ul><li>主要用于对数据包中的 IP 地址进行封装和解析，这一层的数据叫做 <code>数据包</code></li><li>工作设备是：<code>路由器</code> <code>交换机</code> <code>防火墙</code> 等。</li></ul></li><li>传输层<ul><li>定义了传输数据的协议和端口号，主要用于数据的分段、传输和重组。用到的协议：<code>TCP</code> <code>UDP</code> 等。</li><li><code>TCP</code> 是传输控制协议，传输效率低，可靠性强，用于传输对可靠性要求高、数据量小的数据，例如：支付宝的转账</li><li><code>UDP</code> 是用户数据报协议，与 TCP 的特性悄悄相反，用于传输可靠性要求不高、数据量大的数据，例如：抖音短视频</li></ul></li><li>会话层<ul><li>在传输层的基础上建立连接和管理会话，具体包括登录验证、断点续传、数据粘包与分包等。</li><li>在设备之间需要互相识别的可以是 IP ，也可以是 MAC 或者主机名。</li></ul></li><li>表示层<ul><li>主要对接收的数据进行解释、加密、压缩、解压等，即把计算机能够识别的内容转化为人能够识别的内容（图片，文字，声音）</li></ul></li><li>应用层<ul><li>基于网络构建具体应用，例如FTP 文件上传下载服务、Telnet 服务、HTTP 服务、DNS 服务、SNMP 服务。</li></ul></li></ul><h4 id="TCP-IP-四层网络模型"><a href="#TCP-IP-四层网络模型" class="headerlink" title="TCP / IP 四层网络模型"></a>TCP / IP 四层网络模型</h4><blockquote><p>这里不是指TCP和IP两个协议的合称，而是指因特网的整个 TCP/IP 协议蔟。</p></blockquote><ul><li>网络接口层<ul><li>定义了主机间网络连通的协议，具体包括 Echernet 、FDDI 、ATM 等通信协议。</li></ul></li><li>网络层<ul><li>主要用于数据的传输、路由及地址的解析，以保障主机可以把数据发送给任何网络上的目标。数据经过网络传输，发送的顺序和到达的顺序可能发生变化。在网络层使用的 IP 和地址解析协议。</li></ul></li><li>传输层<ul><li>使源端和目的端机器上的对等实体可以基于会话相互通信。在这一层定义了两个端到端的协议 TCP 和 UDP。</li><li><code>TCP</code> 是面向连接的协议，提供可靠的报文传输和上层应用的连接服务，除了基本的数据传输，他还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。</li><li><code>UDP</code> 是面向无连接的不可靠传输的协议，主要用于不需要类似 TCP 的可靠性保障和流量控制等功能的应用程序。</li></ul></li><li>应用层<ul><li>负责具体应用层协议的定义，包括 <code>Telnet</code> （虚拟终端协议） 、<code>FTP</code>  （文件传输协议）、<code>SMTP</code> （电子邮件传输协议）、<code>DNS</code>（域名服务）、<code>NNTP</code> （网上新闻传输协议）和 <code>HTTP</code> （超文本传输协议）等。</li></ul></li></ul><h4 id="TCP-三次握手-四次挥手"><a href="#TCP-三次握手-四次挥手" class="headerlink" title="TCP 三次握手/四次挥手"></a>TCP 三次握手/四次挥手</h4><blockquote><p>TCP数据在传输前首先需要建立连接，建立连接需要进行3次通信，一般被称为“三次握手”，在数据传输完成后断开连接的时候要进行4次通信，一般被称为“四次挥手”。</p></blockquote><p>TCP 的数据包结构</p><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210815222406728.png" alt="image-20210815222406728"></p><p>tcp的头部也是有20个字节，这样加上ip数据报头的20个字节，</p><ul><li><strong>1-1 源端口号16位</strong>，范围在65536</li><li><strong>1-2 目标端口16位</strong>，范围65536<br>源端和目标端口用于寻找发端和收端应用程序，加上ip的原地址和目标地址确定一个唯一tcp连接</li><li><strong>2-1 数据序号32位</strong>，TCP为发送的每个字节都编一个号码，这里存储当前数据包数据第一个字节的序号</li><li><strong>3-1 确认序号32位</strong>，TCP告诉接受者下次接到数据包的第一个字节的序号</li><li><strong>4-1 头部长度4位</strong>，因此TCP最多有60个字节，目前通常来讲有20个字节</li><li><strong>4-2 保留6位</strong>，没有使用，默认状态下置零</li><li><strong>4-3</strong><br>URG 紧急指针<br>ACK 确认讯号有效<br>FIN 发端完成发送任务<br>RST 重建连接<br>PSH 接收方应该尽快将这个报文段交给应用层<br>SYN 同步序号用来发起一个连接</li><li><strong>4-4 窗口字段16位</strong>，窗口字节用来控制对方发送的数据量，TCP流量的控制就靠着这个窗口字段来完成，TCP连接的一端根据设置的缓存空间大小确定自己的接收窗口大小，然后通知对方以确定对方的发送窗口的上限。</li><li><strong>5-1 TCP校验和16位</strong>，包括首部和数据这两部分，在计算校验和时，要在tcp报文段的前面加上12字节的伪首部</li><li><strong>5-2 紧急指针16位</strong>，只有URG设置为1的情况下紧急指针才能有效，tcp的紧急方式是发送端向另一端发送紧急数据的一种方式</li><li><strong>6-1 可选24位</strong>，填充位8位，这样能够凑齐32位</li><li><strong>7-1 用户数据</strong></li></ul><p><strong>TCP 中的三次握手</strong></p><blockquote><p>TCP是因特网的传输层协议，使用三次握手协议建立连接。在客户端主动发出SYN连接请求后，等待对方回答SYN+ACK，并最终对对方的SYN执行ACK确认。</p><p>这种连接方式可以防止产生错误的连接，TCP使用的流量控制协议是课变大小的滑动窗口协议。</p></blockquote><ul><li>三次握手的过程<ul><li>客户端发送 SYN (seq=x)报文给服务器端，进入 SYN_SEND 状态。</li><li>服务端收到 SYN 报文，回应一个 SYN(seq=y) 和 ACK(ack=x+1) 报文，进入 SYN_RECV 状态。</li><li>客户端收到服务端的 SYN 报文，回应一个 ACK (ack = y+1) 报文，进入Established 状态。</li></ul></li></ul><p>成功建立连接后，TCP 客户端和服务端就可以传输数据了。</p><p><strong>TCP的四次挥手</strong></p><blockquote><p>以客户端发起关闭连接请求为例</p></blockquote><ul><li>客户端-发送一个终止标识符 FIN，用来关闭客户端到服务器的数据传送</li><li>服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号</li><li>服务器-关闭与客户端的连接，发送一个FIN给客户端</li><li>客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1</li></ul><p>举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。</p><h4 id="HTTP的原理"><a href="#HTTP的原理" class="headerlink" title="HTTP的原理"></a>HTTP的原理</h4><blockquote><p>HTTP是无状态的协议，无状态是指客户端和服务器之间不需要建立持久的连接，在一个客户端向服务器端发出请求且服务器端收到该请求并返回响应后，本次通信结束，HTTP连接将被关闭，服务器端不保留连接的相关信息。</p></blockquote><p><strong>传输流程</strong></p><ul><li>地址解析<ul><li>通过域名系统 DNS 解析服务器域名从而获得主机的 IP 地址。</li><li>例如：<a href="http://localhost:8081/index.html">http://localhost:8081/index.html</a><ul><li>协议名：HTTP</li><li>主机名：localhost</li><li>端口：8080</li><li>对象路径：/index.html</li></ul></li></ul></li><li>封装 HTTP 数据包<ul><li>解析协议名、主机名、端口、对象路径等并结合本机自己的信息封装成一个 HTTP 请求数据包。</li></ul></li><li>封装 TCP 包<ul><li>将HTTP 数据包进一步封装成 TCP 数据包</li></ul></li><li>建立 TCP 连接<ul><li>基于 TCP 的三次握手机制建立 TCP 连接</li></ul></li><li>客户端发送请求<ul><li>在建立连接后，客户端发送请求给服务器</li></ul></li><li>服务器响应<ul><li>服务器接收请求后，结合业务逻辑进行数据处理，返回响应信息</li><li>响应信息包括：状态行、协议版本号、成功或错误的代码、消息体等</li></ul></li><li>服务器关闭 TCP 连接<ul><li>服务器向浏览器发送请求响应数据后关闭 TCP 连接。</li><li>如果浏览器或服务器在消息头中加入 Connection：keep-alive ，则TCP 连接在请求发送后仍然保持连接状态，在下一次请求中浏览器可以继续使用相同的连接发送请求。</li><li>采用 keep-alive 方式不仅减少了响应时间，还节约了网络带宽和系统资源。</li></ul></li></ul><p><strong>HTTP中的常见状态码</strong></p><table><thead><tr><th>状态码</th><th>原因短语</th></tr></thead><tbody><tr><td>1XX</td><td><strong>消息响应</strong></td></tr><tr><td>100</td><td>Continue(继续)</td></tr><tr><td>101</td><td>Switching Protocol (切换协议)</td></tr><tr><td>2XX</td><td><strong>成功响应</strong></td></tr><tr><td>3XX</td><td><strong>网络重定向</strong></td></tr><tr><td>4XX</td><td><strong>客户端错误</strong></td></tr><tr><td>5XX</td><td><strong>服务器端错误</strong></td></tr></tbody></table><p><img src="https://gitee.com/zyb_01_01/blog-images/raw/master/img/image-20210815222503988.png" alt="image-20210815222503988"></p><p><strong>HTTPS</strong></p><blockquote><p>HTTPS是以安全为目标的HTTP通道，它在HTTP中加入了SSL层以提高数据传输的安全性</p></blockquote><ul><li>HTTP 的加密流程<ul><li>发起请求<ul><li>客户端在通过 TCP 和服务器建立连接之后（默认使用 443 端口），发出一个请求证书的消息给服务器，在该请求消息里包含自己可实现的算法列表和其他需要的消息。</li></ul></li><li>证书返回<ul><li>服务器端在收到消息后回应客户端并返回证书，在证书中包含服务器信息、域名、申请证书的公司、公钥、数据加密算法等</li></ul></li><li>证书验证<ul><li>客户端在收到证书后，判断证书签发机构是否正确，并使用该签发机构的公钥确认签名是否有效，客户端还会确保在证书中列出的域名为正在连接的域名。如果客户端确认证书有效，则生成对称密钥，并使用公钥将对称密钥加密。</li></ul></li><li>密钥交换<ul><li>客户端将加密后的对称密钥发送给服务器，服务器在接受到对称密钥后使用私钥解密。</li></ul></li><li>数据传输<ul><li>客户端和服务器端可以基于对称加密将数据加密后在网络上传输，保证了网络数据传输的安全性。</li></ul></li></ul></li></ul><h4 id="CDN-的原理"><a href="#CDN-的原理" class="headerlink" title="CDN 的原理"></a>CDN 的原理</h4><blockquote><p>CDN(内容分发网络)指基于部署在各地的机房服务器，通过中心平台的负载均衡、内容分发、调度的能力，使用户就近获取所需内容，降低网络延迟，提升用户访问的响应速度和体验度。</p></blockquote><p><strong>CDN 的关键技术</strong></p><ul><li>内容发布<ul><li>借助建立索引、缓存、流分裂、组播等技术，将内容发布到网络上距离用户最近的中心机房。</li></ul></li><li>内容路由<ul><li>通过内容路由器中的重定向（DNS）机制，在多个中心机房的服务器上负载均衡用户的请求，使用户从最近的中心机房获取数据。</li></ul></li><li>内容交换<ul><li>根据内容的可用性、服务器的可用性及用户的背景，在缓存服务器上利用应用层交换、流分裂、重定向等技术，智能地平衡负载流量。</li></ul></li><li>性能管理<ul><li>通过内部和外部监控系统，获取网络部件的信息，测量内容发布的端到端性能（包丢失、延时、平均带宽、启动时间、帧数率等），保证网络处于最佳运行状态。</li></ul></li></ul><p><strong>CDN 的主要特点</strong></p><ul><li>本地缓存加速<ul><li>将用户经常访问的数据（尤其是静态数据）缓存在本地，以提升系统的响应速度和稳定性。</li></ul></li><li>镜像服务<ul><li>消除不同运营商之间的网络差异，实现跨运营商的网络加速，保证不同运营商网络中的用户都能获得良好的网络体验。</li></ul></li><li>远程加速<ul><li>利用 DNS 负载均衡技术为用户选择服务质量最优的服务器，加快用户远程访问的速度。</li></ul></li><li>带宽优化<ul><li>自动生成服务器的远程镜像缓存服务器，远程用户在访问时从最近的缓存服务器上读取数据，减少远程访问的带宽，分担网络流量，并降低原站点的 Web 服务器负载等。</li></ul></li><li>集群抗攻击<ul><li>通过网络安全技术和 CDN 之间的智能冗余机制，可以有效减少网络攻击对网站的影响。</li></ul></li></ul><p><strong>内容分发系统</strong></p><ul><li>将用户请求分发到就近的各个中心机房，以保障为用户提供快速、高效的内存服务。</li><li>缓存的内容包括静态图片、视频、文本、用户最近访问的 JSON 数据等。</li><li>缓存的技术包括：内存缓存、分布式缓存、本地文件缓存等</li><li>缓存的策略主要考虑缓存更新、缓存淘汰机制。</li></ul><p><strong>负载均衡系统</strong></p><blockquote><p>负载均衡是整个CDN系统的核心，负载均衡根据当前网络的流量分布、各中心机房服务器的负载和用户请求的特点将用户的请求负载到把不同的中心机房或不同的服务器上，以保障用户内容访问的流畅性。</p><p>负载均衡系统包括全局负载均衡（GSLB）和本地负载均衡（SLB）</p></blockquote><ul><li>全局负载均衡主要指跨机房的负载均衡，通过 DNS 解析或者应用层重定向技术将用户的请求负载到就近的中心机房上。</li><li>本地负载均衡主要指机房内部的负载均衡，一般通过缓存服务器，基于 LVS、Nginx、服务网关等技术实现用户访问的负载。</li></ul><p><strong>管理系统</strong></p><blockquote><p>分为运营管理和网络管理子系统。</p><p>网络管理系统主要对整个 CDN网络资源的运行状态进行实时监控和管理。</p><p>运营管理指对CDN日常运维业务的管理，包括用户管理、资源管理、流量计费和流量限流。</p></blockquote><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><blockquote><p>负载均衡建立在现有网络结构之上，提供了一种廉价、有效、透明的方法来扩展网络设备和服务器的带宽，增加了吞吐量，加强了网络数据处理能力，并提高了网络的灵活性和可用性。</p><p>项目中常用的负载均衡有四层负载均衡和七层负载均衡。</p></blockquote><h4 id="四层负载均衡和七层负载均衡的对比"><a href="#四层负载均衡和七层负载均衡的对比" class="headerlink" title="四层负载均衡和七层负载均衡的对比"></a>四层负载均衡和七层负载均衡的对比</h4><ul><li><p>四层负载均衡基于 IP 和端口的方式实现网络的负载均衡，具体实现为对外提供一个虚拟 IP 地址和端口接收所有用户的请求，然后根据负载均衡配置和策略将请求发送给真实的服务器。</p></li><li><p>七层负载均衡基于 URL 等资源来实现应用层基于内容的负载均衡，具体实现为通过虚拟的 URL 或主机名接收所有用户的请求，然后将请求发送给真实的服务器。</p></li><li><p>差别：</p><ul><li>四层只能针对 IP 地址和端口上的数据做统一的分发，七层能根据消息的内容做更加详细的有针对性的负载均衡。</li><li>我们通常使用 LVS 等技术实现基于 Socket 的四层负载均衡，使用 Nginx 等技术实现基于内容分发的七层负载均衡。</li></ul></li></ul><p><strong>四层负载均衡</strong></p><p>四层负载均衡主要通过修改报文中的目标地址和端口来实现报文的分发和负载均衡。</p><p><em>以 TCP 为例</em></p><p>负载均衡设备在接收到第1个来自客户端的 SYN 请求后，会根据负载均衡配置和策略选择一个最佳服务器，并将报文中的目标 IP 地址修改为该服务器的 IP 地址直接转发给该服务器。</p><p>TCP 连接的建立（即三次握手过程）是在客户端和服务器端之间完成的，负载均衡设备只起到路由器的转发功能。</p><ul><li>常用的软硬件<ul><li>F5：硬件负载均衡，功能完备，价格昂贵。</li><li>LVS：基于 IP +端口实现的四层负载软件，常和 Keepalive 配合使用。</li><li>Nginx：同时实现四层负载和七层负载均衡，带缓存功能，可基于正则表达式灵活转发。</li></ul></li></ul><p><strong>七层负载均衡</strong></p><p>七层负载均衡也叫内容负载均衡，主要通过解析报文中真正有意义的应用层内容，并根据负载均衡配置和策略选择一个最佳的服务器响应用户的请求。</p><p>七层应用负载均衡可以使整个网络更加智能化，七层负载均衡根据不同的数据类型将数据存储在不同的服务器上来提高网络整体的负载能力。</p><p><em>举例</em></p><p>比如将客户端的基本信息存储在内存较大的缓存服务器上，将文件信息存储在磁盘空间较大的文件服务器上，将图片视频存储在网络 I/O 能力较强的流媒体服务器上。在接收到不同的客户端请求时从不同搞得服务器上获取数据并将其返回给客户端，提高客户端的访问效率。</p><ul><li>常用的软件<ul><li>HAProxy：支持七层代理、会话保持、标记、路径转移等。</li><li>Nginx：同时实现四层负载和七层负载，在HTTP 和 Mail 协议上功能比较好，性能和 HAProxy 相当。</li><li>Apache：使用简单，性能较差。</li></ul></li></ul><h4 id="负载均衡算法"><a href="#负载均衡算法" class="headerlink" title="负载均衡算法"></a>负载均衡算法</h4><blockquote><p>轮询均衡、权重轮询均衡、随机均衡、权重随机均衡、响应速度均衡、最少连接数均衡、处理能力均衡、DNS响应均衡、散列算法均衡、IP地址散列、URL散列</p></blockquote><p><strong>轮询均衡</strong></p><ul><li>客户端请求轮流分配到1 至 N 台服务器上，每台服务器均被均等地分配一定数量的客户端请求。</li><li>适用于集群中所有服务器都有相同的软硬件配置和服务能力的情况下。</li></ul><p><strong>权重轮询均衡</strong></p><ul><li>根据每台服务器的不同配置及服务能力，为每台服务器都设置不同的权重值，然后按照设置的权重值轮询的将请求分配到不同的服务器上。</li><li>主要用于服务器配置不均等的环境中。</li></ul><p><strong>随机均衡</strong></p><ul><li>将来自网络的请求随机分配给内部多台服务器，不考虑服务器的配置和负载情况。</li></ul><p><strong>权重随机均衡</strong></p><ul><li>随机选择某个权重的服务器发送</li></ul><p><strong>响应速度均衡</strong></p><ul><li>根据服务器设备响应速度的不同将客户端请求发送到响应速度最快的服务器上。</li><li>对响应速度的获取是通过负载均衡设备定时为每台服务器都发送一个探测请求（例如Ping）实现的。</li></ul><p><strong>最少连接数均衡</strong></p><ul><li>在负载均衡器内部记录当前每台服务器正在处理的连接数量，在有新的请求时，将该请求分配给连接数最少的服务器。</li><li>适用于网络连接和带宽有限、CPU 处理任务简单的请求服务，例如：ETP。</li></ul><p><strong>处理能力均衡</strong></p><ul><li>将服务请求分配给内部负荷最轻的服务器，负荷是根据服务器的CPU 型号、CPU 数量、内存大小及当前连接数等换算而来。</li><li>由于考虑了内部服务器的处理能力及当前网络的运行状态，所以相对来说更加精确，尤其适用于七层负载均衡。</li></ul><p><strong>DNS 响应均衡</strong></p><ul><li>在分布在不同中心机房的负载均衡设备都收到同一个客户端的域名解析请求时，所有负载均衡设备均解析此域名并将解析后的服务器 IP 地址返回给客户端，客户端向收到第一个域名解析后的 IP 地址发起请求服务，而忽略其他负载均衡设备的响应。</li><li>适用于全局负载均衡的场景。</li></ul><p><strong>散列算法均衡</strong></p><ul><li>通过一致性散列算法和虚拟节点技术将相同参数的请求总是发送到同一台服务器，该服务器将长期、稳定地为某些客户端提供服务。</li><li>在某个服务器被移除或异常宕机后，该服务器的请求基于虚拟节点技术均摊到其他服务器，而不会影响集群整体的稳定性。</li></ul><p><strong>IP 地址散列</strong></p><ul><li>负载均衡器内部维护了不同链接上客户端和服务器的 IP 对应关系表，将来自同一客户端的请求统一转发给相同的服务器。</li><li>该算法能够以会话为单位，保证同一客户端的请求能够一直在同一台服务器上处理。</li><li>主要适用于客户端和服务器需要保持长连接的场景。</li></ul><p><strong>URL 散列</strong></p><ul><li>通过管理客户端请求 URL 信息的散列表，将相同 URL 的请求转发给同一台服务器。</li><li>主要适用于七层负载中根据用户请求类型的不同将其转发给不同类型的应用服务器。</li></ul><h4 id="LVS-的原理及应用"><a href="#LVS-的原理及应用" class="headerlink" title="LVS 的原理及应用"></a>LVS 的原理及应用</h4><blockquote><p>Linux Virtual Server 是一个虚拟的服务器集群系统，采用 IP 负载均衡技术将请求均衡地转移到不同的服务器上执行，且通过调度器自动屏蔽故障服务器，从而将一组服务器构成一个高性能、高可用的虚拟服务器。</p><p>整个服务器集群的结构对用户是透明的，无须修改客户端和服务器端的程序，便可实现客户端到服务器端的负载均衡。</p></blockquote><p><strong>LVS 的原理</strong></p><p>LVS 由前端的负载均衡器（Load Balancer，LB）和后端的真实服务器（Real Server，RS）群组成，在真实服务器间可通过局域网或广域网连接。LVS 的结构对用户是透明的，用户只用关注作为 LB 的虚拟服务器（Virtual Server），而不需要关注提供服务的真实服务器群。</p><p>在用户的请求被发送给虚拟服务器后，LB 根据设定的包转发策略和负载均衡调度算法将用户的请求转发给真实服务器处理，真实服务器在处理完成后再将用户请求的结果返回给用户。</p><ul><li>实现 LVS 的核心组件<ul><li>负载均衡调度器（LB）：是整个集群对外提供服务的入口，通过对外提供一个虚拟 IP 来接收客户端请求。在客户端将请求发送到该虚拟 IP 后，负载均衡调度器会负责将请求按照负载均衡策略发送到一组真实的服务器上。</li><li>服务器池（Server Pool）：服务器池是一组真正处理客户端请求的真实服务器，具体执行的服务有 WEB、MAIL、FTP 和 DNS</li><li>共享存储（Shard Storage）：为服务器池提供一个共享的存储区，使得服务器池拥有相同的内容，提供相同的服务。</li></ul></li></ul><p>LVS 的 IP 负载均衡技术是通过 IPVS 模块实现的。 IPVS 是 LVS 集群系统的核心软件，被安装在 Director Server 上，同时在 Director Server 上虚拟出一个 IP 地址。用户通过这个虚拟的 IP 地址（VIP）访问服务器。<br>访问的请求首先经过 VIP 到达负载调度器，然后有负载调度器从真实服务器列表中选取一个服务器节点响应用户的请求。</p><p><strong>LVS 数据转发</strong></p><ul><li>PREROUTING 链接收用户请求：客户端向 PREROUTING 链发送请求。</li><li>INPUT 链转发：在 PREROUTING 链通过 RouteTable 列表发现请求数据包的目的地址是本机时，将数据包发送给 INPUT 链。</li><li>IPVS 检查：IPVS 检查 INPUT 链上的数据包，如果数据包中的目的地址和端口不在规则列表中，则将该数据包发送到用户空间的 ipvsadm。ipvsadm 主要用于用户定义和管理集群。</li><li>POSTROUTING 链转发：如果数据包中的目的地址和端口都在规则里面，那么将该数据包中的目的地址修改为事先定义好的真实服务器地址，通过 FORWARD 将数据发送到 POSTROUTING链。</li><li>真实服务器转发：POSTROUTING 链根据数据包中的目的地址将数据包转发到真实服务器。</li></ul><p><strong>LVS NAT 模式</strong></p><blockquote><p>LVS NAT（Network Address Translation）即网络地址转换模式。</p></blockquote><p>NAT 模式通过对请求报文和响应报文的地址进行改写完成对数据的转发，流程如下：</p><ul><li>客户端将请求报文发送到 LVS ，请求报文的源地址是 CIP （Client IP Address），目标地址是 VIP。</li><li>LVS 在收到报文后，发现请求的 IP 地址在 LVS 的规则列表中存在，则将客户端请求报文的目标地址 VIP 修改为 RIP（Real Server IP Address，服务器真实 IP），并将报文发送到具体的真实服务器上。</li><li>真实服务器在收到报文后，由于报文的目标地址是自己的 IP，所以会响应该请求，并响应报文返回给 LVS。</li><li>LVS 在收到数据后，将此报文的源地址修改为本机 IP 地址，即VIP 并将报文发送给客户端。</li></ul><p><strong>NAT 特点</strong></p><ul><li>请求的报文和响应的报文都需要通过 LVS 进行地址改写，因此在并发访问量较大的时候 LVS 存在瓶颈问题，一般是用于节点不是很多的问题。</li><li>只需要在 LVS 上配置一个公网 IP 即可。</li><li>每台内部真实服务器的网关地址必须是 LVS 的内网地址。</li><li>NAT 模式支持对 IP 地址和端口进行转换，即用户请求的端口和真实服务器的端口可以不同。</li></ul><p><strong>LVS DR 模式</strong></p><p>直接用路由技术实现，通过改写报文的 MAC 地址将请求发送给真实服务器。</p><p><strong>LVS TUN 模式</strong></p><p>通过 IP 隧道技术实现。</p><p><strong>LVS FULLNAT 模式</strong></p><h4 id="Nginx-反向代理与负载均衡"><a href="#Nginx-反向代理与负载均衡" class="headerlink" title="Nginx 反向代理与负载均衡"></a>Nginx 反向代理与负载均衡</h4><blockquote><p>反向代理服务器在接收用户的访问请求后，会代理用户重新向节点服务器发起请求，反向代理服务器和节点服务器进行具体的数据交互，最后把数据返回给客户端用户。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络</tag>
      
      <tag>负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
